   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"printf.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.printk_putc,"ax",%progbits
  18              		.align	2
  19              		.code	16
  20              		.thumb_func
  22              	printk_putc:
  23              	.LFB0:
  24              		.file 1 "../Sources/printf.c"
   1:../Sources/printf.c **** #include "UART.h"
   2:../Sources/printf.c **** #include <stdarg.h>
   3:../Sources/printf.c **** 
   4:../Sources/printf.c **** #define TRUE 1
   5:../Sources/printf.c **** #define FALSE 0
   6:../Sources/printf.c **** 
   7:../Sources/printf.c **** 
   8:../Sources/printf.c **** typedef struct
   9:../Sources/printf.c **** {
  10:../Sources/printf.c ****     int dest;
  11:../Sources/printf.c ****     void (*func)(char);
  12:../Sources/printf.c ****     char *loc;
  13:../Sources/printf.c **** } PRINTK_INFO;
  14:../Sources/printf.c **** 
  15:../Sources/printf.c **** int printk (PRINTK_INFO *, const char *, va_list);
  16:../Sources/printf.c **** 
  17:../Sources/printf.c **** #define DEST_CONSOLE    (1)
  18:../Sources/printf.c **** #define DEST_STRING     (2)
  19:../Sources/printf.c **** 
  20:../Sources/printf.c **** #define FLAGS_MINUS     (0x01)
  21:../Sources/printf.c **** #define FLAGS_PLUS      (0x02)
  22:../Sources/printf.c **** #define FLAGS_SPACE     (0x04)
  23:../Sources/printf.c **** #define FLAGS_ZERO      (0x08)
  24:../Sources/printf.c **** #define FLAGS_POUND     (0x10)
  25:../Sources/printf.c **** 
  26:../Sources/printf.c **** #define IS_FLAG_MINUS(a)    (a & FLAGS_MINUS)
  27:../Sources/printf.c **** #define IS_FLAG_PLUS(a)     (a & FLAGS_PLUS)
  28:../Sources/printf.c **** #define IS_FLAG_SPACE(a)    (a & FLAGS_SPACE)
  29:../Sources/printf.c **** #define IS_FLAG_ZERO(a)     (a & FLAGS_ZERO)
  30:../Sources/printf.c **** #define IS_FLAG_POUND(a)    (a & FLAGS_POUND)
  31:../Sources/printf.c **** 
  32:../Sources/printf.c **** #define LENMOD_h        (0x01)
  33:../Sources/printf.c **** #define LENMOD_l        (0x02)
  34:../Sources/printf.c **** #define LENMOD_L        (0x04)
  35:../Sources/printf.c **** 
  36:../Sources/printf.c **** #define IS_LENMOD_h(a)  (a & LENMOD_h)
  37:../Sources/printf.c **** #define IS_LENMOD_l(a)  (a & LENMOD_l)
  38:../Sources/printf.c **** #define IS_LENMOD_L(a)  (a & LENMOD_L)
  39:../Sources/printf.c **** 
  40:../Sources/printf.c **** #define FMT_d   (0x0001)
  41:../Sources/printf.c **** #define FMT_o   (0x0002)
  42:../Sources/printf.c **** #define FMT_x   (0x0004)
  43:../Sources/printf.c **** #define FMT_X   (0x0008)
  44:../Sources/printf.c **** #define FMT_u   (0x0010)
  45:../Sources/printf.c **** #define FMT_c   (0x0020)
  46:../Sources/printf.c **** #define FMT_s   (0x0040)
  47:../Sources/printf.c **** #define FMT_p   (0x0080)
  48:../Sources/printf.c **** #define FMT_n   (0x0100)
  49:../Sources/printf.c **** 
  50:../Sources/printf.c **** #define IS_FMT_d(a)     (a & FMT_d)
  51:../Sources/printf.c **** #define IS_FMT_o(a)     (a & FMT_o)
  52:../Sources/printf.c **** #define IS_FMT_x(a)     (a & FMT_x)
  53:../Sources/printf.c **** #define IS_FMT_X(a)     (a & FMT_X)
  54:../Sources/printf.c **** #define IS_FMT_u(a)     (a & FMT_u)
  55:../Sources/printf.c **** #define IS_FMT_c(a)     (a & FMT_c)
  56:../Sources/printf.c **** #define IS_FMT_s(a)     (a & FMT_s)
  57:../Sources/printf.c **** #define IS_FMT_p(a)     (a & FMT_p)
  58:../Sources/printf.c **** #define IS_FMT_n(a)     (a & FMT_n)
  59:../Sources/printf.c **** 
  60:../Sources/printf.c **** /********************************************************************/
  61:../Sources/printf.c **** static void
  62:../Sources/printf.c **** printk_putc (int c, int *count, PRINTK_INFO *info)
  63:../Sources/printf.c **** {
  25              		.loc 1 63 0
  26              		.cfi_startproc
  27 0000 80B5     		push	{r7, lr}
  28              	.LCFI0:
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 84B0     		sub	sp, sp, #16
  33              	.LCFI1:
  34              		.cfi_def_cfa_offset 24
  35 0004 00AF     		add	r7, sp, #0
  36              	.LCFI2:
  37              		.cfi_def_cfa_register 7
  38 0006 F860     		str	r0, [r7, #12]
  39 0008 B960     		str	r1, [r7, #8]
  40 000a 7A60     		str	r2, [r7, #4]
  64:../Sources/printf.c ****     switch (info->dest)
  41              		.loc 1 64 0
  42 000c 7B68     		ldr	r3, [r7, #4]
  43 000e 1B68     		ldr	r3, [r3]
  44 0010 012B     		cmp	r3, #1
  45 0012 02D0     		beq	.L3
  46 0014 022B     		cmp	r3, #2
  47 0016 07D0     		beq	.L4
  48 0018 11E0     		b	.L6
  49              	.L3:
  65:../Sources/printf.c ****     {
  66:../Sources/printf.c ****         case DEST_CONSOLE:
  67:../Sources/printf.c ****             info->func((char)c);
  50              		.loc 1 67 0
  51 001a 7B68     		ldr	r3, [r7, #4]
  52 001c 5B68     		ldr	r3, [r3, #4]
  53 001e FA68     		ldr	r2, [r7, #12]
  54 0020 D2B2     		uxtb	r2, r2
  55 0022 101C     		mov	r0, r2
  56 0024 9847     		blx	r3
  68:../Sources/printf.c ****             break;
  57              		.loc 1 68 0
  58 0026 0BE0     		b	.L5
  59              	.L4:
  69:../Sources/printf.c ****         case DEST_STRING:
  70:../Sources/printf.c ****             *(info->loc) = (unsigned char)c;
  60              		.loc 1 70 0
  61 0028 7B68     		ldr	r3, [r7, #4]
  62 002a 9B68     		ldr	r3, [r3, #8]
  63 002c FA68     		ldr	r2, [r7, #12]
  64 002e D2B2     		uxtb	r2, r2
  65 0030 1A70     		strb	r2, [r3]
  71:../Sources/printf.c ****             ++(info->loc);
  66              		.loc 1 71 0
  67 0032 7B68     		ldr	r3, [r7, #4]
  68 0034 9B68     		ldr	r3, [r3, #8]
  69 0036 5A1C     		add	r2, r3, #1
  70 0038 7B68     		ldr	r3, [r7, #4]
  71 003a 9A60     		str	r2, [r3, #8]
  72:../Sources/printf.c ****             break;
  72              		.loc 1 72 0
  73 003c 00E0     		b	.L5
  74              	.L6:
  73:../Sources/printf.c ****         default:
  74:../Sources/printf.c ****             break;
  75              		.loc 1 74 0
  76 003e C046     		mov	r8, r8
  77              	.L5:
  75:../Sources/printf.c ****     }
  76:../Sources/printf.c ****     *count += 1;
  78              		.loc 1 76 0
  79 0040 BB68     		ldr	r3, [r7, #8]
  80 0042 1B68     		ldr	r3, [r3]
  81 0044 5A1C     		add	r2, r3, #1
  82 0046 BB68     		ldr	r3, [r7, #8]
  83 0048 1A60     		str	r2, [r3]
  77:../Sources/printf.c **** }
  84              		.loc 1 77 0
  85 004a BD46     		mov	sp, r7
  86 004c 04B0     		add	sp, sp, #16
  87              		@ sp needed for prologue
  88 004e 80BD     		pop	{r7, pc}
  89              		.cfi_endproc
  90              	.LFE0:
  92              		.global	__aeabi_idiv
  93              		.global	__aeabi_uidiv
  94              		.section	.text.printk_mknumstr,"ax",%progbits
  95              		.align	2
  96              		.code	16
  97              		.thumb_func
  99              	printk_mknumstr:
 100              	.LFB1:
  78:../Sources/printf.c **** 
  79:../Sources/printf.c **** /********************************************************************/
  80:../Sources/printf.c **** static int
  81:../Sources/printf.c **** printk_mknumstr (char *numstr, void *nump, int neg, int radix)
  82:../Sources/printf.c **** {
 101              		.loc 1 82 0
 102              		.cfi_startproc
 103 0000 80B5     		push	{r7, lr}
 104              	.LCFI3:
 105              		.cfi_def_cfa_offset 8
 106              		.cfi_offset 7, -8
 107              		.cfi_offset 14, -4
 108 0002 8CB0     		sub	sp, sp, #48
 109              	.LCFI4:
 110              		.cfi_def_cfa_offset 56
 111 0004 00AF     		add	r7, sp, #0
 112              	.LCFI5:
 113              		.cfi_def_cfa_register 7
 114 0006 F860     		str	r0, [r7, #12]
 115 0008 B960     		str	r1, [r7, #8]
 116 000a 7A60     		str	r2, [r7, #4]
 117 000c 3B60     		str	r3, [r7]
  83:../Sources/printf.c ****     int a,b,c;
  84:../Sources/printf.c ****     unsigned int ua,ub,uc;
  85:../Sources/printf.c **** 
  86:../Sources/printf.c ****     int nlen;
  87:../Sources/printf.c ****     char *nstrp;
  88:../Sources/printf.c **** 
  89:../Sources/printf.c ****     nlen = 0;
 118              		.loc 1 89 0
 119 000e 0023     		mov	r3, #0
 120 0010 FB61     		str	r3, [r7, #28]
  90:../Sources/printf.c ****     nstrp = numstr;
 121              		.loc 1 90 0
 122 0012 FB68     		ldr	r3, [r7, #12]
 123 0014 BB61     		str	r3, [r7, #24]
  91:../Sources/printf.c ****     *nstrp++ = '\0';
 124              		.loc 1 91 0
 125 0016 BB69     		ldr	r3, [r7, #24]
 126 0018 0022     		mov	r2, #0
 127 001a 1A70     		strb	r2, [r3]
 128 001c BB69     		ldr	r3, [r7, #24]
 129 001e 0133     		add	r3, r3, #1
 130 0020 BB61     		str	r3, [r7, #24]
  92:../Sources/printf.c **** 
  93:../Sources/printf.c ****     if (neg)
 131              		.loc 1 93 0
 132 0022 7B68     		ldr	r3, [r7, #4]
 133 0024 002B     		cmp	r3, #0
 134 0026 33D0     		beq	.L8
  94:../Sources/printf.c ****     {
  95:../Sources/printf.c ****         a = *(int *)nump;
 135              		.loc 1 95 0
 136 0028 BB68     		ldr	r3, [r7, #8]
 137 002a 1B68     		ldr	r3, [r3]
 138 002c FB62     		str	r3, [r7, #44]
  96:../Sources/printf.c ****         if (a == 0)
 139              		.loc 1 96 0
 140 002e FB6A     		ldr	r3, [r7, #44]
 141 0030 002B     		cmp	r3, #0
 142 0032 29D1     		bne	.L11
  97:../Sources/printf.c ****         {
  98:../Sources/printf.c ****             *nstrp = '0';
 143              		.loc 1 98 0
 144 0034 BB69     		ldr	r3, [r7, #24]
 145 0036 3022     		mov	r2, #48
 146 0038 1A70     		strb	r2, [r3]
  99:../Sources/printf.c ****             ++nlen;
 147              		.loc 1 99 0
 148 003a FB69     		ldr	r3, [r7, #28]
 149 003c 0133     		add	r3, r3, #1
 150 003e FB61     		str	r3, [r7, #28]
 100:../Sources/printf.c ****             goto done;
 151              		.loc 1 100 0
 152 0040 59E0     		b	.L10
 153              	.L14:
 101:../Sources/printf.c ****         }
 102:../Sources/printf.c ****         while (a != 0)
 103:../Sources/printf.c ****         {
 104:../Sources/printf.c ****             b = (int)a / (int)radix;
 154              		.loc 1 104 0
 155 0042 F86A     		ldr	r0, [r7, #44]
 156 0044 3968     		ldr	r1, [r7]
 157 0046 FFF7FEFF 		bl	__aeabi_idiv
 158 004a 031C     		mov	r3, r0
 159 004c 7B61     		str	r3, [r7, #20]
 105:../Sources/printf.c ****             c = (int)a - ((int)b * (int)radix);
 160              		.loc 1 105 0
 161 004e 7B69     		ldr	r3, [r7, #20]
 162 0050 3A68     		ldr	r2, [r7]
 163 0052 5343     		mul	r3, r2
 164 0054 FA6A     		ldr	r2, [r7, #44]
 165 0056 D31A     		sub	r3, r2, r3
 166 0058 BB62     		str	r3, [r7, #40]
 106:../Sources/printf.c ****             if (c < 0)
 167              		.loc 1 106 0
 168 005a BB6A     		ldr	r3, [r7, #40]
 169 005c 002B     		cmp	r3, #0
 170 005e 04DA     		bge	.L12
 107:../Sources/printf.c ****             {
 108:../Sources/printf.c ****                 c = ~c + 1 + '0';
 171              		.loc 1 108 0
 172 0060 BB6A     		ldr	r3, [r7, #40]
 173 0062 3022     		mov	r2, #48
 174 0064 D31A     		sub	r3, r2, r3
 175 0066 BB62     		str	r3, [r7, #40]
 176 0068 02E0     		b	.L13
 177              	.L12:
 109:../Sources/printf.c ****             }
 110:../Sources/printf.c ****             else
 111:../Sources/printf.c ****             {
 112:../Sources/printf.c ****                 c = c + '0';
 178              		.loc 1 112 0
 179 006a BB6A     		ldr	r3, [r7, #40]
 180 006c 3033     		add	r3, r3, #48
 181 006e BB62     		str	r3, [r7, #40]
 182              	.L13:
 113:../Sources/printf.c ****             }
 114:../Sources/printf.c ****             a = b;
 183              		.loc 1 114 0
 184 0070 7B69     		ldr	r3, [r7, #20]
 185 0072 FB62     		str	r3, [r7, #44]
 115:../Sources/printf.c ****             *nstrp++ = (char)c;
 186              		.loc 1 115 0
 187 0074 BB6A     		ldr	r3, [r7, #40]
 188 0076 DAB2     		uxtb	r2, r3
 189 0078 BB69     		ldr	r3, [r7, #24]
 190 007a 1A70     		strb	r2, [r3]
 191 007c BB69     		ldr	r3, [r7, #24]
 192 007e 0133     		add	r3, r3, #1
 193 0080 BB61     		str	r3, [r7, #24]
 116:../Sources/printf.c ****             ++nlen;
 194              		.loc 1 116 0
 195 0082 FB69     		ldr	r3, [r7, #28]
 196 0084 0133     		add	r3, r3, #1
 197 0086 FB61     		str	r3, [r7, #28]
 198              	.L11:
 102:../Sources/printf.c ****         while (a != 0)
 199              		.loc 1 102 0
 200 0088 FB6A     		ldr	r3, [r7, #44]
 201 008a 002B     		cmp	r3, #0
 202 008c D9D1     		bne	.L14
 102:../Sources/printf.c ****         while (a != 0)
 203              		.loc 1 102 0 is_stmt 0
 204 008e 32E0     		b	.L10
 205              	.L8:
 117:../Sources/printf.c ****         }
 118:../Sources/printf.c ****     }
 119:../Sources/printf.c ****     else
 120:../Sources/printf.c ****     {
 121:../Sources/printf.c ****         ua = *(unsigned int *)nump;
 206              		.loc 1 121 0 is_stmt 1
 207 0090 BB68     		ldr	r3, [r7, #8]
 208 0092 1B68     		ldr	r3, [r3]
 209 0094 7B62     		str	r3, [r7, #36]
 122:../Sources/printf.c ****         if (ua == 0)
 210              		.loc 1 122 0
 211 0096 7B6A     		ldr	r3, [r7, #36]
 212 0098 002B     		cmp	r3, #0
 213 009a 29D1     		bne	.L16
 123:../Sources/printf.c ****         {
 124:../Sources/printf.c ****             *nstrp = '0';
 214              		.loc 1 124 0
 215 009c BB69     		ldr	r3, [r7, #24]
 216 009e 3022     		mov	r2, #48
 217 00a0 1A70     		strb	r2, [r3]
 125:../Sources/printf.c ****             ++nlen;
 218              		.loc 1 125 0
 219 00a2 FB69     		ldr	r3, [r7, #28]
 220 00a4 0133     		add	r3, r3, #1
 221 00a6 FB61     		str	r3, [r7, #28]
 126:../Sources/printf.c ****             goto done;
 222              		.loc 1 126 0
 223 00a8 25E0     		b	.L10
 224              	.L19:
 127:../Sources/printf.c ****         }
 128:../Sources/printf.c ****         while (ua != 0)
 129:../Sources/printf.c ****         {
 130:../Sources/printf.c ****             ub = (unsigned int)ua / (unsigned int)radix;
 225              		.loc 1 130 0
 226 00aa 3B68     		ldr	r3, [r7]
 227 00ac 786A     		ldr	r0, [r7, #36]
 228 00ae 191C     		mov	r1, r3
 229 00b0 FFF7FEFF 		bl	__aeabi_uidiv
 230 00b4 031C     		mov	r3, r0
 231 00b6 3B61     		str	r3, [r7, #16]
 131:../Sources/printf.c ****             uc = (unsigned int)ua - ((unsigned int)ub * (unsigned int)radix);
 232              		.loc 1 131 0
 233 00b8 3B68     		ldr	r3, [r7]
 234 00ba 3A69     		ldr	r2, [r7, #16]
 235 00bc 5343     		mul	r3, r2
 236 00be 7A6A     		ldr	r2, [r7, #36]
 237 00c0 D31A     		sub	r3, r2, r3
 238 00c2 3B62     		str	r3, [r7, #32]
 132:../Sources/printf.c ****             if (uc < 10)
 239              		.loc 1 132 0
 240 00c4 3B6A     		ldr	r3, [r7, #32]
 241 00c6 092B     		cmp	r3, #9
 242 00c8 03D8     		bhi	.L17
 133:../Sources/printf.c ****             {
 134:../Sources/printf.c ****                 uc = uc + '0';
 243              		.loc 1 134 0
 244 00ca 3B6A     		ldr	r3, [r7, #32]
 245 00cc 3033     		add	r3, r3, #48
 246 00ce 3B62     		str	r3, [r7, #32]
 247 00d0 02E0     		b	.L18
 248              	.L17:
 135:../Sources/printf.c ****             }
 136:../Sources/printf.c ****             else
 137:../Sources/printf.c ****             {
 138:../Sources/printf.c ****                 uc = uc - 10 + 'A';
 249              		.loc 1 138 0
 250 00d2 3B6A     		ldr	r3, [r7, #32]
 251 00d4 3733     		add	r3, r3, #55
 252 00d6 3B62     		str	r3, [r7, #32]
 253              	.L18:
 139:../Sources/printf.c ****             }
 140:../Sources/printf.c ****             ua = ub;
 254              		.loc 1 140 0
 255 00d8 3B69     		ldr	r3, [r7, #16]
 256 00da 7B62     		str	r3, [r7, #36]
 141:../Sources/printf.c ****             *nstrp++ = (char)uc;
 257              		.loc 1 141 0
 258 00dc 3B6A     		ldr	r3, [r7, #32]
 259 00de DAB2     		uxtb	r2, r3
 260 00e0 BB69     		ldr	r3, [r7, #24]
 261 00e2 1A70     		strb	r2, [r3]
 262 00e4 BB69     		ldr	r3, [r7, #24]
 263 00e6 0133     		add	r3, r3, #1
 264 00e8 BB61     		str	r3, [r7, #24]
 142:../Sources/printf.c ****             ++nlen;
 265              		.loc 1 142 0
 266 00ea FB69     		ldr	r3, [r7, #28]
 267 00ec 0133     		add	r3, r3, #1
 268 00ee FB61     		str	r3, [r7, #28]
 269              	.L16:
 128:../Sources/printf.c ****         while (ua != 0)
 270              		.loc 1 128 0
 271 00f0 7B6A     		ldr	r3, [r7, #36]
 272 00f2 002B     		cmp	r3, #0
 273 00f4 D9D1     		bne	.L19
 274              	.L10:
 143:../Sources/printf.c ****         }
 144:../Sources/printf.c ****     }
 145:../Sources/printf.c ****     done:
 146:../Sources/printf.c ****     return nlen;
 275              		.loc 1 146 0
 276 00f6 FB69     		ldr	r3, [r7, #28]
 147:../Sources/printf.c **** }
 277              		.loc 1 147 0
 278 00f8 181C     		mov	r0, r3
 279 00fa BD46     		mov	sp, r7
 280 00fc 0CB0     		add	sp, sp, #48
 281              		@ sp needed for prologue
 282 00fe 80BD     		pop	{r7, pc}
 283              		.cfi_endproc
 284              	.LFE1:
 286              		.section	.text.printk_pad_zero,"ax",%progbits
 287              		.align	2
 288              		.code	16
 289              		.thumb_func
 291              	printk_pad_zero:
 292              	.LFB2:
 148:../Sources/printf.c **** 
 149:../Sources/printf.c **** /********************************************************************/
 150:../Sources/printf.c **** static void
 151:../Sources/printf.c **** printk_pad_zero (int curlen, int field_width, int *count, PRINTK_INFO *info)
 152:../Sources/printf.c **** {
 293              		.loc 1 152 0
 294              		.cfi_startproc
 295 0000 80B5     		push	{r7, lr}
 296              	.LCFI6:
 297              		.cfi_def_cfa_offset 8
 298              		.cfi_offset 7, -8
 299              		.cfi_offset 14, -4
 300 0002 86B0     		sub	sp, sp, #24
 301              	.LCFI7:
 302              		.cfi_def_cfa_offset 32
 303 0004 00AF     		add	r7, sp, #0
 304              	.LCFI8:
 305              		.cfi_def_cfa_register 7
 306 0006 F860     		str	r0, [r7, #12]
 307 0008 B960     		str	r1, [r7, #8]
 308 000a 7A60     		str	r2, [r7, #4]
 309 000c 3B60     		str	r3, [r7]
 153:../Sources/printf.c ****     int i;
 154:../Sources/printf.c **** 
 155:../Sources/printf.c ****     for (i = curlen; i < field_width; i++)
 310              		.loc 1 155 0
 311 000e FB68     		ldr	r3, [r7, #12]
 312 0010 7B61     		str	r3, [r7, #20]
 313 0012 09E0     		b	.L22
 314              	.L23:
 156:../Sources/printf.c ****     {
 157:../Sources/printf.c ****         printk_putc('0',count, info);
 315              		.loc 1 157 0
 316 0014 7A68     		ldr	r2, [r7, #4]
 317 0016 3B68     		ldr	r3, [r7]
 318 0018 3020     		mov	r0, #48
 319 001a 111C     		mov	r1, r2
 320 001c 1A1C     		mov	r2, r3
 321 001e FFF7FEFF 		bl	printk_putc
 155:../Sources/printf.c ****     for (i = curlen; i < field_width; i++)
 322              		.loc 1 155 0
 323 0022 7B69     		ldr	r3, [r7, #20]
 324 0024 0133     		add	r3, r3, #1
 325 0026 7B61     		str	r3, [r7, #20]
 326              	.L22:
 155:../Sources/printf.c ****     for (i = curlen; i < field_width; i++)
 327              		.loc 1 155 0 is_stmt 0
 328 0028 7A69     		ldr	r2, [r7, #20]
 329 002a BB68     		ldr	r3, [r7, #8]
 330 002c 9A42     		cmp	r2, r3
 331 002e F1DB     		blt	.L23
 158:../Sources/printf.c ****     }
 159:../Sources/printf.c **** }
 332              		.loc 1 159 0 is_stmt 1
 333 0030 BD46     		mov	sp, r7
 334 0032 06B0     		add	sp, sp, #24
 335              		@ sp needed for prologue
 336 0034 80BD     		pop	{r7, pc}
 337              		.cfi_endproc
 338              	.LFE2:
 340 0036 C046     		.section	.text.printk_pad_space,"ax",%progbits
 341              		.align	2
 342              		.code	16
 343              		.thumb_func
 345              	printk_pad_space:
 346              	.LFB3:
 160:../Sources/printf.c **** 
 161:../Sources/printf.c **** /********************************************************************/
 162:../Sources/printf.c **** static void
 163:../Sources/printf.c **** printk_pad_space (int curlen, int field_width, int *count, PRINTK_INFO *info)
 164:../Sources/printf.c **** {
 347              		.loc 1 164 0
 348              		.cfi_startproc
 349 0000 80B5     		push	{r7, lr}
 350              	.LCFI9:
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354 0002 86B0     		sub	sp, sp, #24
 355              	.LCFI10:
 356              		.cfi_def_cfa_offset 32
 357 0004 00AF     		add	r7, sp, #0
 358              	.LCFI11:
 359              		.cfi_def_cfa_register 7
 360 0006 F860     		str	r0, [r7, #12]
 361 0008 B960     		str	r1, [r7, #8]
 362 000a 7A60     		str	r2, [r7, #4]
 363 000c 3B60     		str	r3, [r7]
 165:../Sources/printf.c ****     int i;
 166:../Sources/printf.c **** 
 167:../Sources/printf.c ****     for (i = curlen; i < field_width; i++)
 364              		.loc 1 167 0
 365 000e FB68     		ldr	r3, [r7, #12]
 366 0010 7B61     		str	r3, [r7, #20]
 367 0012 09E0     		b	.L25
 368              	.L26:
 168:../Sources/printf.c ****     {
 169:../Sources/printf.c ****         printk_putc(' ',count, info);
 369              		.loc 1 169 0
 370 0014 7A68     		ldr	r2, [r7, #4]
 371 0016 3B68     		ldr	r3, [r7]
 372 0018 2020     		mov	r0, #32
 373 001a 111C     		mov	r1, r2
 374 001c 1A1C     		mov	r2, r3
 375 001e FFF7FEFF 		bl	printk_putc
 167:../Sources/printf.c ****     for (i = curlen; i < field_width; i++)
 376              		.loc 1 167 0
 377 0022 7B69     		ldr	r3, [r7, #20]
 378 0024 0133     		add	r3, r3, #1
 379 0026 7B61     		str	r3, [r7, #20]
 380              	.L25:
 167:../Sources/printf.c ****     for (i = curlen; i < field_width; i++)
 381              		.loc 1 167 0 is_stmt 0
 382 0028 7A69     		ldr	r2, [r7, #20]
 383 002a BB68     		ldr	r3, [r7, #8]
 384 002c 9A42     		cmp	r2, r3
 385 002e F1DB     		blt	.L26
 170:../Sources/printf.c ****     }
 171:../Sources/printf.c **** }
 386              		.loc 1 171 0 is_stmt 1
 387 0030 BD46     		mov	sp, r7
 388 0032 06B0     		add	sp, sp, #24
 389              		@ sp needed for prologue
 390 0034 80BD     		pop	{r7, pc}
 391              		.cfi_endproc
 392              	.LFE3:
 394 0036 C046     		.section	.text.printk,"ax",%progbits
 395              		.align	2
 396              		.global	printk
 397              		.code	16
 398              		.thumb_func
 400              	printk:
 401              	.LFB4:
 172:../Sources/printf.c **** 
 173:../Sources/printf.c **** /********************************************************************/
 174:../Sources/printf.c **** int
 175:../Sources/printf.c **** printk (PRINTK_INFO *info, const char *fmt, va_list ap)
 176:../Sources/printf.c **** {
 402              		.loc 1 176 0
 403              		.cfi_startproc
 404 0000 80B5     		push	{r7, lr}
 405              	.LCFI12:
 406              		.cfi_def_cfa_offset 8
 407              		.cfi_offset 7, -8
 408              		.cfi_offset 14, -4
 409 0002 9CB0     		sub	sp, sp, #112
 410              	.LCFI13:
 411              		.cfi_def_cfa_offset 120
 412 0004 00AF     		add	r7, sp, #0
 413              	.LCFI14:
 414              		.cfi_def_cfa_register 7
 415 0006 F860     		str	r0, [r7, #12]
 416 0008 B960     		str	r1, [r7, #8]
 417 000a 7A60     		str	r2, [r7, #4]
 177:../Sources/printf.c ****     /* va_list ap; */
 178:../Sources/printf.c ****     char *p;
 179:../Sources/printf.c ****     int c;
 180:../Sources/printf.c **** 
 181:../Sources/printf.c ****     char vstr[33];
 182:../Sources/printf.c ****     char *vstrp;
 183:../Sources/printf.c ****     int vlen;
 184:../Sources/printf.c **** 
 185:../Sources/printf.c ****     int done;
 186:../Sources/printf.c ****     int count = 0;
 418              		.loc 1 186 0
 419 000c 0023     		mov	r3, #0
 420 000e BB61     		str	r3, [r7, #24]
 187:../Sources/printf.c **** 
 188:../Sources/printf.c ****     int flags_used;
 189:../Sources/printf.c ****     int field_width;
 190:../Sources/printf.c **** #if 0
 191:../Sources/printf.c ****     int precision_used;
 192:../Sources/printf.c ****     int precision_width;
 193:../Sources/printf.c ****     int length_modifier;
 194:../Sources/printf.c **** #endif
 195:../Sources/printf.c **** 
 196:../Sources/printf.c ****     int ival;
 197:../Sources/printf.c ****     int schar, dschar;
 198:../Sources/printf.c ****     int *ivalp;
 199:../Sources/printf.c ****     char *sval;
 200:../Sources/printf.c ****     int cval;
 201:../Sources/printf.c ****     unsigned int uval;
 202:../Sources/printf.c **** 
 203:../Sources/printf.c ****     /*
 204:../Sources/printf.c ****      * Start parsing apart the format string and display appropriate
 205:../Sources/printf.c ****      * formats and data.
 206:../Sources/printf.c ****      */
 207:../Sources/printf.c ****     for (p = (char *)fmt; (c = *p) != 0; p++)
 421              		.loc 1 207 0
 422 0010 BB68     		ldr	r3, [r7, #8]
 423 0012 FB66     		str	r3, [r7, #108]
 424 0014 ABE2     		b	.L28
 425              	.L92:
 208:../Sources/printf.c ****     {
 209:../Sources/printf.c ****         /*
 210:../Sources/printf.c ****          * All formats begin with a '%' marker.  Special chars like
 211:../Sources/printf.c ****          * '\n' or '\t' are normally converted to the appropriate
 212:../Sources/printf.c ****          * character by the __compiler__.  Thus, no need for this
 213:../Sources/printf.c ****          * routine to account for the '\' character.
 214:../Sources/printf.c ****          */
 215:../Sources/printf.c ****         if (c != '%')
 426              		.loc 1 215 0
 427 0016 BB6C     		ldr	r3, [r7, #72]
 428 0018 252B     		cmp	r3, #37
 429 001a 1DD0     		beq	.L29
 216:../Sources/printf.c ****         {
 217:../Sources/printf.c ****             /*
 218:../Sources/printf.c ****              * This needs to be replaced with something like
 219:../Sources/printf.c ****              * 'out_char()' or call an OS routine.
 220:../Sources/printf.c ****              */
 221:../Sources/printf.c **** #ifndef UNIX_DEBUG
 222:../Sources/printf.c ****             if (c != '\n')
 430              		.loc 1 222 0
 431 001c BB6C     		ldr	r3, [r7, #72]
 432 001e 0A2B     		cmp	r3, #10
 433 0020 09D0     		beq	.L30
 223:../Sources/printf.c ****             {
 224:../Sources/printf.c ****                 printk_putc(c, &count, info);
 434              		.loc 1 224 0
 435 0022 B96C     		ldr	r1, [r7, #72]
 436 0024 3A1C     		mov	r2, r7
 437 0026 1832     		add	r2, r2, #24
 438 0028 FB68     		ldr	r3, [r7, #12]
 439 002a 081C     		mov	r0, r1
 440 002c 111C     		mov	r1, r2
 441 002e 1A1C     		mov	r2, r3
 442 0030 FFF7FEFF 		bl	printk_putc
 225:../Sources/printf.c ****             }
 226:../Sources/printf.c ****             else
 227:../Sources/printf.c ****             {
 228:../Sources/printf.c ****                 printk_putc(0x0D /* CR */, &count, info);
 229:../Sources/printf.c ****                 printk_putc(0x0A /* LF */, &count, info);
 230:../Sources/printf.c ****             }
 231:../Sources/printf.c **** #else
 232:../Sources/printf.c ****             printk_putc(c, &count, info);
 233:../Sources/printf.c **** #endif
 234:../Sources/printf.c **** 
 235:../Sources/printf.c ****             /*
 236:../Sources/printf.c ****              * By using 'continue', the next iteration of the loop
 237:../Sources/printf.c ****              * is used, skipping the code that follows.
 238:../Sources/printf.c ****              */
 239:../Sources/printf.c ****             continue;
 443              		.loc 1 239 0
 444 0034 98E2     		b	.L32
 445              	.L30:
 228:../Sources/printf.c ****                 printk_putc(0x0D /* CR */, &count, info);
 446              		.loc 1 228 0
 447 0036 3A1C     		mov	r2, r7
 448 0038 1832     		add	r2, r2, #24
 449 003a FB68     		ldr	r3, [r7, #12]
 450 003c 0D20     		mov	r0, #13
 451 003e 111C     		mov	r1, r2
 452 0040 1A1C     		mov	r2, r3
 453 0042 FFF7FEFF 		bl	printk_putc
 229:../Sources/printf.c ****                 printk_putc(0x0A /* LF */, &count, info);
 454              		.loc 1 229 0
 455 0046 3A1C     		mov	r2, r7
 456 0048 1832     		add	r2, r2, #24
 457 004a FB68     		ldr	r3, [r7, #12]
 458 004c 0A20     		mov	r0, #10
 459 004e 111C     		mov	r1, r2
 460 0050 1A1C     		mov	r2, r3
 461 0052 FFF7FEFF 		bl	printk_putc
 462              		.loc 1 239 0
 463 0056 87E2     		b	.L32
 464              	.L29:
 240:../Sources/printf.c ****         }
 241:../Sources/printf.c **** 
 242:../Sources/printf.c ****         /*
 243:../Sources/printf.c ****          * First check for specification modifier flags.
 244:../Sources/printf.c ****          */
 245:../Sources/printf.c ****         flags_used = 0;
 465              		.loc 1 245 0
 466 0058 0023     		mov	r3, #0
 467 005a FB65     		str	r3, [r7, #92]
 246:../Sources/printf.c ****         done = FALSE;
 468              		.loc 1 246 0
 469 005c 0023     		mov	r3, #0
 470 005e 3B66     		str	r3, [r7, #96]
 247:../Sources/printf.c ****         while (!done)
 471              		.loc 1 247 0
 472 0060 2BE0     		b	.L33
 473              	.L41:
 248:../Sources/printf.c ****         {
 249:../Sources/printf.c ****             switch (/* c = */ *++p)
 474              		.loc 1 249 0
 475 0062 FB6E     		ldr	r3, [r7, #108]
 476 0064 0133     		add	r3, r3, #1
 477 0066 FB66     		str	r3, [r7, #108]
 478 0068 FB6E     		ldr	r3, [r7, #108]
 479 006a 1B78     		ldrb	r3, [r3]
 480 006c 203B     		sub	r3, r3, #32
 481 006e 102B     		cmp	r3, #16
 482 0070 1DD8     		bhi	.L34
 483 0072 9A00     		lsl	r2, r3, #2
 484 0074 CE4B     		ldr	r3, .L103
 485 0076 D318     		add	r3, r2, r3
 486 0078 1B68     		ldr	r3, [r3]
 487 007a 9F46     		mov	pc, r3
 488              		.section	.rodata.printk,"a",%progbits
 489              		.align	2
 490              	.L40:
 491 0000 90000000 		.word	.L35
 492 0004 AE000000 		.word	.L34
 493 0008 AE000000 		.word	.L34
 494 000c A4000000 		.word	.L36
 495 0010 AE000000 		.word	.L34
 496 0014 AE000000 		.word	.L34
 497 0018 AE000000 		.word	.L34
 498 001c AE000000 		.word	.L34
 499 0020 AE000000 		.word	.L34
 500 0024 AE000000 		.word	.L34
 501 0028 AE000000 		.word	.L34
 502 002c 86000000 		.word	.L37
 503 0030 AE000000 		.word	.L34
 504 0034 7C000000 		.word	.L38
 505 0038 AE000000 		.word	.L34
 506 003c AE000000 		.word	.L34
 507 0040 9A000000 		.word	.L39
 508              		.section	.text.printk
 509              	.L38:
 250:../Sources/printf.c ****             {
 251:../Sources/printf.c ****                 case '-':
 252:../Sources/printf.c ****                     flags_used |= FLAGS_MINUS;
 510              		.loc 1 252 0
 511 007c FB6D     		ldr	r3, [r7, #92]
 512 007e 0122     		mov	r2, #1
 513 0080 1343     		orr	r3, r2
 514 0082 FB65     		str	r3, [r7, #92]
 253:../Sources/printf.c ****                     break;
 515              		.loc 1 253 0
 516 0084 19E0     		b	.L33
 517              	.L37:
 254:../Sources/printf.c ****                 case '+':
 255:../Sources/printf.c ****                     flags_used |= FLAGS_PLUS;
 518              		.loc 1 255 0
 519 0086 FB6D     		ldr	r3, [r7, #92]
 520 0088 0222     		mov	r2, #2
 521 008a 1343     		orr	r3, r2
 522 008c FB65     		str	r3, [r7, #92]
 256:../Sources/printf.c ****                     break;
 523              		.loc 1 256 0
 524 008e 14E0     		b	.L33
 525              	.L35:
 257:../Sources/printf.c ****                 case ' ':
 258:../Sources/printf.c ****                     flags_used |= FLAGS_SPACE;
 526              		.loc 1 258 0
 527 0090 FB6D     		ldr	r3, [r7, #92]
 528 0092 0422     		mov	r2, #4
 529 0094 1343     		orr	r3, r2
 530 0096 FB65     		str	r3, [r7, #92]
 259:../Sources/printf.c ****                     break;
 531              		.loc 1 259 0
 532 0098 0FE0     		b	.L33
 533              	.L39:
 260:../Sources/printf.c ****                 case '0':
 261:../Sources/printf.c ****                     flags_used |= FLAGS_ZERO;
 534              		.loc 1 261 0
 535 009a FB6D     		ldr	r3, [r7, #92]
 536 009c 0822     		mov	r2, #8
 537 009e 1343     		orr	r3, r2
 538 00a0 FB65     		str	r3, [r7, #92]
 262:../Sources/printf.c ****                     break;
 539              		.loc 1 262 0
 540 00a2 0AE0     		b	.L33
 541              	.L36:
 263:../Sources/printf.c ****                 case '#':
 264:../Sources/printf.c ****                     flags_used |= FLAGS_POUND;
 542              		.loc 1 264 0
 543 00a4 FB6D     		ldr	r3, [r7, #92]
 544 00a6 1022     		mov	r2, #16
 545 00a8 1343     		orr	r3, r2
 546 00aa FB65     		str	r3, [r7, #92]
 265:../Sources/printf.c ****                     break;
 547              		.loc 1 265 0
 548 00ac 05E0     		b	.L33
 549              	.L34:
 266:../Sources/printf.c ****                 default:
 267:../Sources/printf.c ****                     /* we've gone one char too far */
 268:../Sources/printf.c ****                     --p;
 550              		.loc 1 268 0
 551 00ae FB6E     		ldr	r3, [r7, #108]
 552 00b0 013B     		sub	r3, r3, #1
 553 00b2 FB66     		str	r3, [r7, #108]
 269:../Sources/printf.c ****                     done = TRUE;
 554              		.loc 1 269 0
 555 00b4 0123     		mov	r3, #1
 556 00b6 3B66     		str	r3, [r7, #96]
 270:../Sources/printf.c ****                     break;
 557              		.loc 1 270 0
 558 00b8 C046     		mov	r8, r8
 559              	.L33:
 247:../Sources/printf.c ****         while (!done)
 560              		.loc 1 247 0
 561 00ba 3B6E     		ldr	r3, [r7, #96]
 562 00bc 002B     		cmp	r3, #0
 563 00be D0D0     		beq	.L41
 271:../Sources/printf.c ****             }
 272:../Sources/printf.c ****         }
 273:../Sources/printf.c **** 
 274:../Sources/printf.c ****         /*
 275:../Sources/printf.c ****          * Next check for minimum field width.
 276:../Sources/printf.c ****          */
 277:../Sources/printf.c ****         field_width = 0;
 564              		.loc 1 277 0
 565 00c0 0023     		mov	r3, #0
 566 00c2 BB65     		str	r3, [r7, #88]
 278:../Sources/printf.c ****         done = FALSE;
 567              		.loc 1 278 0
 568 00c4 0023     		mov	r3, #0
 569 00c6 3B66     		str	r3, [r7, #96]
 279:../Sources/printf.c ****         while (!done)
 570              		.loc 1 279 0
 571 00c8 1AE0     		b	.L42
 572              	.L45:
 280:../Sources/printf.c ****         {
 281:../Sources/printf.c ****             switch (c = *++p)
 573              		.loc 1 281 0
 574 00ca FB6E     		ldr	r3, [r7, #108]
 575 00cc 0133     		add	r3, r3, #1
 576 00ce FB66     		str	r3, [r7, #108]
 577 00d0 FB6E     		ldr	r3, [r7, #108]
 578 00d2 1B78     		ldrb	r3, [r3]
 579 00d4 BB64     		str	r3, [r7, #72]
 580 00d6 BB6C     		ldr	r3, [r7, #72]
 581 00d8 303B     		sub	r3, r3, #48
 582 00da 092B     		cmp	r3, #9
 583 00dc 0AD8     		bhi	.L43
 282:../Sources/printf.c ****             {
 283:../Sources/printf.c ****                 case '0':
 284:../Sources/printf.c ****                 case '1':
 285:../Sources/printf.c ****                 case '2':
 286:../Sources/printf.c ****                 case '3':
 287:../Sources/printf.c ****                 case '4':
 288:../Sources/printf.c ****                 case '5':
 289:../Sources/printf.c ****                 case '6':
 290:../Sources/printf.c ****                 case '7':
 291:../Sources/printf.c ****                 case '8':
 292:../Sources/printf.c ****                 case '9':
 293:../Sources/printf.c ****                     field_width = (field_width * 10) + (c - '0');
 584              		.loc 1 293 0
 585 00de BA6D     		ldr	r2, [r7, #88]
 586 00e0 131C     		mov	r3, r2
 587 00e2 9B00     		lsl	r3, r3, #2
 588 00e4 9B18     		add	r3, r3, r2
 589 00e6 5B00     		lsl	r3, r3, #1
 590 00e8 1A1C     		mov	r2, r3
 591 00ea BB6C     		ldr	r3, [r7, #72]
 592 00ec 303B     		sub	r3, r3, #48
 593 00ee D318     		add	r3, r2, r3
 594 00f0 BB65     		str	r3, [r7, #88]
 294:../Sources/printf.c ****                     break;
 595              		.loc 1 294 0
 596 00f2 05E0     		b	.L42
 597              	.L43:
 295:../Sources/printf.c ****                 default:
 296:../Sources/printf.c ****                     /* we've gone one char too far */
 297:../Sources/printf.c ****                     --p;
 598              		.loc 1 297 0
 599 00f4 FB6E     		ldr	r3, [r7, #108]
 600 00f6 013B     		sub	r3, r3, #1
 601 00f8 FB66     		str	r3, [r7, #108]
 298:../Sources/printf.c ****                     done = TRUE;
 602              		.loc 1 298 0
 603 00fa 0123     		mov	r3, #1
 604 00fc 3B66     		str	r3, [r7, #96]
 299:../Sources/printf.c ****                     break;
 605              		.loc 1 299 0
 606 00fe C046     		mov	r8, r8
 607              	.L42:
 279:../Sources/printf.c ****         while (!done)
 608              		.loc 1 279 0
 609 0100 3B6E     		ldr	r3, [r7, #96]
 610 0102 002B     		cmp	r3, #0
 611 0104 E1D0     		beq	.L45
 300:../Sources/printf.c ****             }
 301:../Sources/printf.c ****         }
 302:../Sources/printf.c **** 
 303:../Sources/printf.c ****         /*
 304:../Sources/printf.c ****          * Next check for the width and precision field separator.
 305:../Sources/printf.c ****          */
 306:../Sources/printf.c ****         if (/* (c = *++p) */ *++p == '.')
 612              		.loc 1 306 0
 613 0106 FB6E     		ldr	r3, [r7, #108]
 614 0108 0133     		add	r3, r3, #1
 615 010a FB66     		str	r3, [r7, #108]
 616 010c FB6E     		ldr	r3, [r7, #108]
 617 010e 1B78     		ldrb	r3, [r3]
 618 0110 2E2B     		cmp	r3, #46
 619 0112 15D1     		bne	.L46
 307:../Sources/printf.c ****         {
 308:../Sources/printf.c ****             /* precision_used = TRUE; */
 309:../Sources/printf.c **** 
 310:../Sources/printf.c ****             /*
 311:../Sources/printf.c ****              * Must get precision field width, if present.
 312:../Sources/printf.c ****              */
 313:../Sources/printf.c ****             /* precision_width = 0; */
 314:../Sources/printf.c ****             done = FALSE;
 620              		.loc 1 314 0
 621 0114 0023     		mov	r3, #0
 622 0116 3B66     		str	r3, [r7, #96]
 315:../Sources/printf.c ****             while (!done)
 623              		.loc 1 315 0
 624 0118 0EE0     		b	.L47
 625              	.L50:
 316:../Sources/printf.c ****             {
 317:../Sources/printf.c ****                 switch (/* c = uncomment if used below */ *++p)
 626              		.loc 1 317 0
 627 011a FB6E     		ldr	r3, [r7, #108]
 628 011c 0133     		add	r3, r3, #1
 629 011e FB66     		str	r3, [r7, #108]
 630 0120 FB6E     		ldr	r3, [r7, #108]
 631 0122 1B78     		ldrb	r3, [r3]
 632 0124 303B     		sub	r3, r3, #48
 633 0126 092B     		cmp	r3, #9
 634 0128 00D8     		bhi	.L48
 318:../Sources/printf.c ****                 {
 319:../Sources/printf.c ****                     case '0':
 320:../Sources/printf.c ****                     case '1':
 321:../Sources/printf.c ****                     case '2':
 322:../Sources/printf.c ****                     case '3':
 323:../Sources/printf.c ****                     case '4':
 324:../Sources/printf.c ****                     case '5':
 325:../Sources/printf.c ****                     case '6':
 326:../Sources/printf.c ****                     case '7':
 327:../Sources/printf.c ****                     case '8':
 328:../Sources/printf.c ****                     case '9':
 329:../Sources/printf.c **** #if 0
 330:../Sources/printf.c ****                         precision_width = (precision_width * 10) +
 331:../Sources/printf.c ****                             (c - '0');
 332:../Sources/printf.c **** #endif
 333:../Sources/printf.c ****                         break;
 635              		.loc 1 333 0
 636 012a 05E0     		b	.L47
 637              	.L48:
 334:../Sources/printf.c ****                     default:
 335:../Sources/printf.c ****                         /* we've gone one char too far */
 336:../Sources/printf.c ****                         --p;
 638              		.loc 1 336 0
 639 012c FB6E     		ldr	r3, [r7, #108]
 640 012e 013B     		sub	r3, r3, #1
 641 0130 FB66     		str	r3, [r7, #108]
 337:../Sources/printf.c ****                         done = TRUE;
 642              		.loc 1 337 0
 643 0132 0123     		mov	r3, #1
 644 0134 3B66     		str	r3, [r7, #96]
 338:../Sources/printf.c ****                         break;
 645              		.loc 1 338 0
 646 0136 C046     		mov	r8, r8
 647              	.L47:
 315:../Sources/printf.c ****             while (!done)
 648              		.loc 1 315 0
 649 0138 3B6E     		ldr	r3, [r7, #96]
 650 013a 002B     		cmp	r3, #0
 651 013c EDD0     		beq	.L50
 315:../Sources/printf.c ****             while (!done)
 652              		.loc 1 315 0 is_stmt 0
 653 013e 02E0     		b	.L51
 654              	.L46:
 339:../Sources/printf.c ****                 }
 340:../Sources/printf.c ****             }
 341:../Sources/printf.c ****         }
 342:../Sources/printf.c ****         else
 343:../Sources/printf.c ****         {
 344:../Sources/printf.c ****             /* we've gone one char too far */
 345:../Sources/printf.c ****             --p;
 655              		.loc 1 345 0 is_stmt 1
 656 0140 FB6E     		ldr	r3, [r7, #108]
 657 0142 013B     		sub	r3, r3, #1
 658 0144 FB66     		str	r3, [r7, #108]
 659              	.L51:
 346:../Sources/printf.c **** #if 0
 347:../Sources/printf.c ****             precision_used = FALSE;
 348:../Sources/printf.c ****             precision_width = 0;
 349:../Sources/printf.c **** #endif
 350:../Sources/printf.c ****         }
 351:../Sources/printf.c **** 
 352:../Sources/printf.c ****         /*
 353:../Sources/printf.c ****          * Check for the length modifier.
 354:../Sources/printf.c ****          */
 355:../Sources/printf.c ****         /* length_modifier = 0; */
 356:../Sources/printf.c ****         switch (/* c = */ *++p)
 660              		.loc 1 356 0
 661 0146 FB6E     		ldr	r3, [r7, #108]
 662 0148 0133     		add	r3, r3, #1
 663 014a FB66     		str	r3, [r7, #108]
 664 014c FB6E     		ldr	r3, [r7, #108]
 665 014e 1B78     		ldrb	r3, [r3]
 666 0150 682B     		cmp	r3, #104
 667 0152 07D0     		beq	.L94
 668 0154 6C2B     		cmp	r3, #108
 669 0156 07D0     		beq	.L95
 670 0158 4C2B     		cmp	r3, #76
 671 015a 07D0     		beq	.L96
 357:../Sources/printf.c ****         {
 358:../Sources/printf.c ****             case 'h':
 359:../Sources/printf.c ****                 /* length_modifier |= LENMOD_h; */
 360:../Sources/printf.c ****                 break;
 361:../Sources/printf.c ****             case 'l':
 362:../Sources/printf.c ****                 /* length_modifier |= LENMOD_l; */
 363:../Sources/printf.c ****                 break;
 364:../Sources/printf.c ****             case 'L':
 365:../Sources/printf.c ****                 /* length_modifier |= LENMOD_L; */
 366:../Sources/printf.c ****                 break;
 367:../Sources/printf.c ****             default:
 368:../Sources/printf.c ****                 /* we've gone one char too far */
 369:../Sources/printf.c ****                 --p;
 672              		.loc 1 369 0
 673 015c FB6E     		ldr	r3, [r7, #108]
 674 015e 013B     		sub	r3, r3, #1
 675 0160 FB66     		str	r3, [r7, #108]
 370:../Sources/printf.c ****                 break;
 676              		.loc 1 370 0
 677 0162 04E0     		b	.L56
 678              	.L94:
 360:../Sources/printf.c ****                 break;
 679              		.loc 1 360 0
 680 0164 C046     		mov	r8, r8
 681 0166 02E0     		b	.L56
 682              	.L95:
 363:../Sources/printf.c ****                 break;
 683              		.loc 1 363 0
 684 0168 C046     		mov	r8, r8
 685 016a 00E0     		b	.L56
 686              	.L96:
 366:../Sources/printf.c ****                 break;
 687              		.loc 1 366 0
 688 016c C046     		mov	r8, r8
 689              	.L56:
 371:../Sources/printf.c ****         }
 372:../Sources/printf.c **** 
 373:../Sources/printf.c ****         /*
 374:../Sources/printf.c ****          * Now we're ready to examine the format.
 375:../Sources/printf.c ****          */
 376:../Sources/printf.c ****         switch (c = *++p)
 690              		.loc 1 376 0
 691 016e FB6E     		ldr	r3, [r7, #108]
 692 0170 0133     		add	r3, r3, #1
 693 0172 FB66     		str	r3, [r7, #108]
 694 0174 FB6E     		ldr	r3, [r7, #108]
 695 0176 1B78     		ldrb	r3, [r3]
 696 0178 BB64     		str	r3, [r7, #72]
 697 017a BB6C     		ldr	r3, [r7, #72]
 698 017c 583B     		sub	r3, r3, #88
 699 017e 202B     		cmp	r3, #32
 700 0180 00D9     		bls	.LCB608
 701 0182 E4E1     		b	.L57	@long jump
 702              	.LCB608:
 703 0184 9A00     		lsl	r2, r3, #2
 704 0186 8B4B     		ldr	r3, .L103+4
 705 0188 D318     		add	r3, r2, r3
 706 018a 1B68     		ldr	r3, [r3]
 707 018c 9F46     		mov	pc, r3
 708              		.section	.rodata.printk
 709              		.align	2
 710              	.L67:
 711 0044 8A020000 		.word	.L58
 712 0048 4E050000 		.word	.L57
 713 004c 4E050000 		.word	.L57
 714 0050 4E050000 		.word	.L57
 715 0054 4E050000 		.word	.L57
 716 0058 4E050000 		.word	.L57
 717 005c 4E050000 		.word	.L57
 718 0060 4E050000 		.word	.L57
 719 0064 4E050000 		.word	.L57
 720 0068 4E050000 		.word	.L57
 721 006c B8030000 		.word	.L59
 722 0070 A8040000 		.word	.L60
 723 0074 8E010000 		.word	.L61
 724 0078 4E050000 		.word	.L57
 725 007c 4E050000 		.word	.L57
 726 0080 4E050000 		.word	.L57
 727 0084 4E050000 		.word	.L57
 728 0088 8E010000 		.word	.L61
 729 008c 4E050000 		.word	.L57
 730 0090 4E050000 		.word	.L57
 731 0094 4E050000 		.word	.L57
 732 0098 4E050000 		.word	.L57
 733 009c 3C050000 		.word	.L62
 734 00a0 8C030000 		.word	.L63
 735 00a4 DC030000 		.word	.L64
 736 00a8 4E050000 		.word	.L57
 737 00ac 4E050000 		.word	.L57
 738 00b0 C8040000 		.word	.L65
 739 00b4 4E050000 		.word	.L57
 740 00b8 00040000 		.word	.L66
 741 00bc 4E050000 		.word	.L57
 742 00c0 4E050000 		.word	.L57
 743 00c4 8A020000 		.word	.L58
 744              		.section	.text.printk
 745              	.L61:
 377:../Sources/printf.c ****         {
 378:../Sources/printf.c ****             case 'd':
 379:../Sources/printf.c ****             case 'i':
 380:../Sources/printf.c ****                 ival = (int)va_arg(ap, int);
 746              		.loc 1 380 0
 747 018e 7B68     		ldr	r3, [r7, #4]
 748 0190 1A1D     		add	r2, r3, #4
 749 0192 7A60     		str	r2, [r7, #4]
 750 0194 1B68     		ldr	r3, [r3]
 751 0196 7B61     		str	r3, [r7, #20]
 381:../Sources/printf.c ****                 vlen = printk_mknumstr(vstr,&ival,TRUE,10);
 752              		.loc 1 381 0
 753 0198 3A1C     		mov	r2, r7
 754 019a 1C32     		add	r2, r2, #28
 755 019c 3B1C     		mov	r3, r7
 756 019e 1433     		add	r3, r3, #20
 757 01a0 101C     		mov	r0, r2
 758 01a2 191C     		mov	r1, r3
 759 01a4 0122     		mov	r2, #1
 760 01a6 0A23     		mov	r3, #10
 761 01a8 FFF7FEFF 		bl	printk_mknumstr
 762 01ac 031C     		mov	r3, r0
 763 01ae 7B66     		str	r3, [r7, #100]
 382:../Sources/printf.c ****                 vstrp = &vstr[vlen];
 764              		.loc 1 382 0
 765 01b0 3A1C     		mov	r2, r7
 766 01b2 1C32     		add	r2, r2, #28
 767 01b4 7B6E     		ldr	r3, [r7, #100]
 768 01b6 D318     		add	r3, r2, r3
 769 01b8 BB66     		str	r3, [r7, #104]
 383:../Sources/printf.c **** 
 384:../Sources/printf.c ****                 if (ival < 0)
 770              		.loc 1 384 0
 771 01ba 7B69     		ldr	r3, [r7, #20]
 772 01bc 002B     		cmp	r3, #0
 773 01be 05DA     		bge	.L68
 385:../Sources/printf.c ****                 {
 386:../Sources/printf.c ****                     schar = '-';
 774              		.loc 1 386 0
 775 01c0 2D23     		mov	r3, #45
 776 01c2 7B65     		str	r3, [r7, #84]
 387:../Sources/printf.c ****                     ++vlen;
 777              		.loc 1 387 0
 778 01c4 7B6E     		ldr	r3, [r7, #100]
 779 01c6 0133     		add	r3, r3, #1
 780 01c8 7B66     		str	r3, [r7, #100]
 781 01ca 15E0     		b	.L69
 782              	.L68:
 388:../Sources/printf.c ****                 }
 389:../Sources/printf.c ****                 else
 390:../Sources/printf.c ****                 {
 391:../Sources/printf.c ****                     if (IS_FLAG_PLUS(flags_used))
 783              		.loc 1 391 0
 784 01cc FA6D     		ldr	r2, [r7, #92]
 785 01ce 0223     		mov	r3, #2
 786 01d0 1340     		and	r3, r2
 787 01d2 05D0     		beq	.L70
 392:../Sources/printf.c ****                     {
 393:../Sources/printf.c ****                         schar = '+';
 788              		.loc 1 393 0
 789 01d4 2B23     		mov	r3, #43
 790 01d6 7B65     		str	r3, [r7, #84]
 394:../Sources/printf.c ****                         ++vlen;
 791              		.loc 1 394 0
 792 01d8 7B6E     		ldr	r3, [r7, #100]
 793 01da 0133     		add	r3, r3, #1
 794 01dc 7B66     		str	r3, [r7, #100]
 795 01de 0BE0     		b	.L69
 796              	.L70:
 395:../Sources/printf.c ****                     }
 396:../Sources/printf.c ****                     else
 397:../Sources/printf.c ****                     {
 398:../Sources/printf.c ****                         if (IS_FLAG_SPACE(flags_used))
 797              		.loc 1 398 0
 798 01e0 FA6D     		ldr	r2, [r7, #92]
 799 01e2 0423     		mov	r3, #4
 800 01e4 1340     		and	r3, r2
 801 01e6 05D0     		beq	.L71
 399:../Sources/printf.c ****                         {
 400:../Sources/printf.c ****                             schar = ' ';
 802              		.loc 1 400 0
 803 01e8 2023     		mov	r3, #32
 804 01ea 7B65     		str	r3, [r7, #84]
 401:../Sources/printf.c ****                             ++vlen;
 805              		.loc 1 401 0
 806 01ec 7B6E     		ldr	r3, [r7, #100]
 807 01ee 0133     		add	r3, r3, #1
 808 01f0 7B66     		str	r3, [r7, #100]
 809 01f2 01E0     		b	.L69
 810              	.L71:
 402:../Sources/printf.c ****                         }
 403:../Sources/printf.c ****                         else
 404:../Sources/printf.c ****                         {
 405:../Sources/printf.c ****                             schar = 0;
 811              		.loc 1 405 0
 812 01f4 0023     		mov	r3, #0
 813 01f6 7B65     		str	r3, [r7, #84]
 814              	.L69:
 406:../Sources/printf.c ****                         }
 407:../Sources/printf.c ****                     }
 408:../Sources/printf.c ****                 }
 409:../Sources/printf.c ****                 dschar = FALSE;
 815              		.loc 1 409 0
 816 01f8 0023     		mov	r3, #0
 817 01fa 3B65     		str	r3, [r7, #80]
 410:../Sources/printf.c **** 
 411:../Sources/printf.c ****                 /*
 412:../Sources/printf.c ****                  * do the ZERO pad.
 413:../Sources/printf.c ****                  */
 414:../Sources/printf.c ****                 if (IS_FLAG_ZERO(flags_used))
 818              		.loc 1 414 0
 819 01fc FA6D     		ldr	r2, [r7, #92]
 820 01fe 0823     		mov	r3, #8
 821 0200 1340     		and	r3, r2
 822 0202 17D0     		beq	.L72
 415:../Sources/printf.c ****                 {
 416:../Sources/printf.c ****                     if (schar)
 823              		.loc 1 416 0
 824 0204 7B6D     		ldr	r3, [r7, #84]
 825 0206 002B     		cmp	r3, #0
 826 0208 08D0     		beq	.L73
 417:../Sources/printf.c ****                         printk_putc(schar, &count, info);
 827              		.loc 1 417 0
 828 020a 796D     		ldr	r1, [r7, #84]
 829 020c 3A1C     		mov	r2, r7
 830 020e 1832     		add	r2, r2, #24
 831 0210 FB68     		ldr	r3, [r7, #12]
 832 0212 081C     		mov	r0, r1
 833 0214 111C     		mov	r1, r2
 834 0216 1A1C     		mov	r2, r3
 835 0218 FFF7FEFF 		bl	printk_putc
 836              	.L73:
 418:../Sources/printf.c ****                     dschar = TRUE;
 837              		.loc 1 418 0
 838 021c 0123     		mov	r3, #1
 839 021e 3B65     		str	r3, [r7, #80]
 419:../Sources/printf.c **** 
 420:../Sources/printf.c ****                     printk_pad_zero (vlen, field_width, &count, info);
 840              		.loc 1 420 0
 841 0220 786E     		ldr	r0, [r7, #100]
 842 0222 B96D     		ldr	r1, [r7, #88]
 843 0224 3A1C     		mov	r2, r7
 844 0226 1832     		add	r2, r2, #24
 845 0228 FB68     		ldr	r3, [r7, #12]
 846 022a FFF7FEFF 		bl	printk_pad_zero
 421:../Sources/printf.c ****                     vlen = field_width;
 847              		.loc 1 421 0
 848 022e BB6D     		ldr	r3, [r7, #88]
 849 0230 7B66     		str	r3, [r7, #100]
 850 0232 18E0     		b	.L74
 851              	.L72:
 422:../Sources/printf.c ****                 }
 423:../Sources/printf.c ****                 else
 424:../Sources/printf.c ****                 {
 425:../Sources/printf.c ****                     if (!IS_FLAG_MINUS(flags_used))
 852              		.loc 1 425 0
 853 0234 FA6D     		ldr	r2, [r7, #92]
 854 0236 0123     		mov	r3, #1
 855 0238 1340     		and	r3, r2
 856 023a 14D1     		bne	.L74
 426:../Sources/printf.c ****                     {
 427:../Sources/printf.c ****                         printk_pad_space (vlen, field_width, &count, info);
 857              		.loc 1 427 0
 858 023c 786E     		ldr	r0, [r7, #100]
 859 023e B96D     		ldr	r1, [r7, #88]
 860 0240 3A1C     		mov	r2, r7
 861 0242 1832     		add	r2, r2, #24
 862 0244 FB68     		ldr	r3, [r7, #12]
 863 0246 FFF7FEFF 		bl	printk_pad_space
 428:../Sources/printf.c **** 
 429:../Sources/printf.c ****                         if (schar)
 864              		.loc 1 429 0
 865 024a 7B6D     		ldr	r3, [r7, #84]
 866 024c 002B     		cmp	r3, #0
 867 024e 08D0     		beq	.L75
 430:../Sources/printf.c ****                             printk_putc(schar, &count, info);
 868              		.loc 1 430 0
 869 0250 796D     		ldr	r1, [r7, #84]
 870 0252 3A1C     		mov	r2, r7
 871 0254 1832     		add	r2, r2, #24
 872 0256 FB68     		ldr	r3, [r7, #12]
 873 0258 081C     		mov	r0, r1
 874 025a 111C     		mov	r1, r2
 875 025c 1A1C     		mov	r2, r3
 876 025e FFF7FEFF 		bl	printk_putc
 877              	.L75:
 431:../Sources/printf.c ****                         dschar = TRUE;
 878              		.loc 1 431 0
 879 0262 0123     		mov	r3, #1
 880 0264 3B65     		str	r3, [r7, #80]
 881              	.L74:
 432:../Sources/printf.c ****                     }
 433:../Sources/printf.c ****                 }
 434:../Sources/printf.c **** 
 435:../Sources/printf.c ****                 /* the string was built in reverse order, now display in */
 436:../Sources/printf.c ****                 /* correct order */
 437:../Sources/printf.c ****                 if (!dschar && schar)
 882              		.loc 1 437 0
 883 0266 3B6D     		ldr	r3, [r7, #80]
 884 0268 002B     		cmp	r3, #0
 885 026a 00D0     		beq	.LCB749
 886 026c F8E0     		b	.L97	@long jump
 887              	.LCB749:
 888              		.loc 1 437 0 is_stmt 0
 889 026e 7B6D     		ldr	r3, [r7, #84]
 890 0270 002B     		cmp	r3, #0
 891 0272 00D1     		bne	.LCB752
 892 0274 F4E0     		b	.L97	@long jump
 893              	.LCB752:
 438:../Sources/printf.c ****                 {
 439:../Sources/printf.c ****                     printk_putc(schar, &count, info);
 894              		.loc 1 439 0 is_stmt 1
 895 0276 796D     		ldr	r1, [r7, #84]
 896 0278 3A1C     		mov	r2, r7
 897 027a 1832     		add	r2, r2, #24
 898 027c FB68     		ldr	r3, [r7, #12]
 899 027e 081C     		mov	r0, r1
 900 0280 111C     		mov	r1, r2
 901 0282 1A1C     		mov	r2, r3
 902 0284 FFF7FEFF 		bl	printk_putc
 440:../Sources/printf.c ****                 }
 441:../Sources/printf.c ****                 goto cont_xd;
 903              		.loc 1 441 0
 904 0288 EAE0     		b	.L97
 905              	.L58:
 442:../Sources/printf.c **** 
 443:../Sources/printf.c ****             case 'x':
 444:../Sources/printf.c ****             case 'X':
 445:../Sources/printf.c ****                 uval = (unsigned int)va_arg(ap, unsigned int);
 906              		.loc 1 445 0
 907 028a 7B68     		ldr	r3, [r7, #4]
 908 028c 1A1D     		add	r2, r3, #4
 909 028e 7A60     		str	r2, [r7, #4]
 910 0290 1B68     		ldr	r3, [r3]
 911 0292 3B61     		str	r3, [r7, #16]
 446:../Sources/printf.c ****                 vlen = printk_mknumstr(vstr,&uval,FALSE,16);
 912              		.loc 1 446 0
 913 0294 3A1C     		mov	r2, r7
 914 0296 1C32     		add	r2, r2, #28
 915 0298 3B1C     		mov	r3, r7
 916 029a 1033     		add	r3, r3, #16
 917 029c 101C     		mov	r0, r2
 918 029e 191C     		mov	r1, r3
 919 02a0 0022     		mov	r2, #0
 920 02a2 1023     		mov	r3, #16
 921 02a4 FFF7FEFF 		bl	printk_mknumstr
 922 02a8 031C     		mov	r3, r0
 923 02aa 7B66     		str	r3, [r7, #100]
 447:../Sources/printf.c ****                 vstrp = &vstr[vlen];
 924              		.loc 1 447 0
 925 02ac 3A1C     		mov	r2, r7
 926 02ae 1C32     		add	r2, r2, #28
 927 02b0 7B6E     		ldr	r3, [r7, #100]
 928 02b2 D318     		add	r3, r2, r3
 929 02b4 BB66     		str	r3, [r7, #104]
 448:../Sources/printf.c **** 
 449:../Sources/printf.c ****                 dschar = FALSE;
 930              		.loc 1 449 0
 931 02b6 0023     		mov	r3, #0
 932 02b8 3B65     		str	r3, [r7, #80]
 450:../Sources/printf.c ****                 if (IS_FLAG_ZERO(flags_used))
 933              		.loc 1 450 0
 934 02ba FA6D     		ldr	r2, [r7, #92]
 935 02bc 0823     		mov	r3, #8
 936 02be 1340     		and	r3, r2
 937 02c0 1FD0     		beq	.L78
 451:../Sources/printf.c ****                 {
 452:../Sources/printf.c ****                     if (IS_FLAG_POUND(flags_used))
 938              		.loc 1 452 0
 939 02c2 FA6D     		ldr	r2, [r7, #92]
 940 02c4 1023     		mov	r3, #16
 941 02c6 1340     		and	r3, r2
 942 02c8 11D0     		beq	.L79
 453:../Sources/printf.c ****                     {
 454:../Sources/printf.c ****                         printk_putc('0', &count, info);
 943              		.loc 1 454 0
 944 02ca 3A1C     		mov	r2, r7
 945 02cc 1832     		add	r2, r2, #24
 946 02ce FB68     		ldr	r3, [r7, #12]
 947 02d0 3020     		mov	r0, #48
 948 02d2 111C     		mov	r1, r2
 949 02d4 1A1C     		mov	r2, r3
 950 02d6 FFF7FEFF 		bl	printk_putc
 455:../Sources/printf.c ****                         printk_putc('x', &count, info);
 951              		.loc 1 455 0
 952 02da 3A1C     		mov	r2, r7
 953 02dc 1832     		add	r2, r2, #24
 954 02de FB68     		ldr	r3, [r7, #12]
 955 02e0 7820     		mov	r0, #120
 956 02e2 111C     		mov	r1, r2
 957 02e4 1A1C     		mov	r2, r3
 958 02e6 FFF7FEFF 		bl	printk_putc
 456:../Sources/printf.c ****                         /*vlen += 2;*/
 457:../Sources/printf.c ****                         dschar = TRUE;
 959              		.loc 1 457 0
 960 02ea 0123     		mov	r3, #1
 961 02ec 3B65     		str	r3, [r7, #80]
 962              	.L79:
 458:../Sources/printf.c ****                     }
 459:../Sources/printf.c ****                     printk_pad_zero (vlen, field_width, &count, info);
 963              		.loc 1 459 0
 964 02ee 786E     		ldr	r0, [r7, #100]
 965 02f0 B96D     		ldr	r1, [r7, #88]
 966 02f2 3A1C     		mov	r2, r7
 967 02f4 1832     		add	r2, r2, #24
 968 02f6 FB68     		ldr	r3, [r7, #12]
 969 02f8 FFF7FEFF 		bl	printk_pad_zero
 460:../Sources/printf.c ****                     vlen = field_width;
 970              		.loc 1 460 0
 971 02fc BB6D     		ldr	r3, [r7, #88]
 972 02fe 7B66     		str	r3, [r7, #100]
 973 0300 27E0     		b	.L80
 974              	.L78:
 461:../Sources/printf.c ****                 }
 462:../Sources/printf.c ****                 else
 463:../Sources/printf.c ****                 {
 464:../Sources/printf.c ****                     if (!IS_FLAG_MINUS(flags_used))
 975              		.loc 1 464 0
 976 0302 FA6D     		ldr	r2, [r7, #92]
 977 0304 0123     		mov	r3, #1
 978 0306 1340     		and	r3, r2
 979 0308 23D1     		bne	.L80
 465:../Sources/printf.c ****                     {
 466:../Sources/printf.c ****                         if (IS_FLAG_POUND(flags_used))
 980              		.loc 1 466 0
 981 030a FA6D     		ldr	r2, [r7, #92]
 982 030c 1023     		mov	r3, #16
 983 030e 1340     		and	r3, r2
 984 0310 02D0     		beq	.L81
 467:../Sources/printf.c ****                         {
 468:../Sources/printf.c ****                             vlen += 2;
 985              		.loc 1 468 0
 986 0312 7B6E     		ldr	r3, [r7, #100]
 987 0314 0233     		add	r3, r3, #2
 988 0316 7B66     		str	r3, [r7, #100]
 989              	.L81:
 469:../Sources/printf.c ****                         }
 470:../Sources/printf.c ****                         printk_pad_space (vlen, field_width, &count, info);
 990              		.loc 1 470 0
 991 0318 786E     		ldr	r0, [r7, #100]
 992 031a B96D     		ldr	r1, [r7, #88]
 993 031c 3A1C     		mov	r2, r7
 994 031e 1832     		add	r2, r2, #24
 995 0320 FB68     		ldr	r3, [r7, #12]
 996 0322 FFF7FEFF 		bl	printk_pad_space
 471:../Sources/printf.c ****                         if (IS_FLAG_POUND(flags_used))
 997              		.loc 1 471 0
 998 0326 FA6D     		ldr	r2, [r7, #92]
 999 0328 1023     		mov	r3, #16
 1000 032a 1340     		and	r3, r2
 1001 032c 11D0     		beq	.L80
 472:../Sources/printf.c ****                         {
 473:../Sources/printf.c ****                             printk_putc('0', &count, info);
 1002              		.loc 1 473 0
 1003 032e 3A1C     		mov	r2, r7
 1004 0330 1832     		add	r2, r2, #24
 1005 0332 FB68     		ldr	r3, [r7, #12]
 1006 0334 3020     		mov	r0, #48
 1007 0336 111C     		mov	r1, r2
 1008 0338 1A1C     		mov	r2, r3
 1009 033a FFF7FEFF 		bl	printk_putc
 474:../Sources/printf.c ****                             printk_putc('x', &count, info);
 1010              		.loc 1 474 0
 1011 033e 3A1C     		mov	r2, r7
 1012 0340 1832     		add	r2, r2, #24
 1013 0342 FB68     		ldr	r3, [r7, #12]
 1014 0344 7820     		mov	r0, #120
 1015 0346 111C     		mov	r1, r2
 1016 0348 1A1C     		mov	r2, r3
 1017 034a FFF7FEFF 		bl	printk_putc
 475:../Sources/printf.c ****                             dschar = TRUE;
 1018              		.loc 1 475 0
 1019 034e 0123     		mov	r3, #1
 1020 0350 3B65     		str	r3, [r7, #80]
 1021              	.L80:
 476:../Sources/printf.c ****                         }
 477:../Sources/printf.c ****                     }
 478:../Sources/printf.c ****                 }
 479:../Sources/printf.c **** 
 480:../Sources/printf.c ****                 if ((IS_FLAG_POUND(flags_used)) && !dschar)
 1022              		.loc 1 480 0
 1023 0352 FA6D     		ldr	r2, [r7, #92]
 1024 0354 1023     		mov	r3, #16
 1025 0356 1340     		and	r3, r2
 1026 0358 00D1     		bne	.LCB876
 1027 035a 83E0     		b	.L98	@long jump
 1028              	.LCB876:
 1029              		.loc 1 480 0 is_stmt 0
 1030 035c 3B6D     		ldr	r3, [r7, #80]
 1031 035e 002B     		cmp	r3, #0
 1032 0360 00D0     		beq	.LCB879
 1033 0362 7FE0     		b	.L98	@long jump
 1034              	.LCB879:
 481:../Sources/printf.c ****                 {
 482:../Sources/printf.c ****                     printk_putc('0', &count, info);
 1035              		.loc 1 482 0 is_stmt 1
 1036 0364 3A1C     		mov	r2, r7
 1037 0366 1832     		add	r2, r2, #24
 1038 0368 FB68     		ldr	r3, [r7, #12]
 1039 036a 3020     		mov	r0, #48
 1040 036c 111C     		mov	r1, r2
 1041 036e 1A1C     		mov	r2, r3
 1042 0370 FFF7FEFF 		bl	printk_putc
 483:../Sources/printf.c ****                     printk_putc('x', &count, info);
 1043              		.loc 1 483 0
 1044 0374 3A1C     		mov	r2, r7
 1045 0376 1832     		add	r2, r2, #24
 1046 0378 FB68     		ldr	r3, [r7, #12]
 1047 037a 7820     		mov	r0, #120
 1048 037c 111C     		mov	r1, r2
 1049 037e 1A1C     		mov	r2, r3
 1050 0380 FFF7FEFF 		bl	printk_putc
 484:../Sources/printf.c ****                     vlen += 2;
 1051              		.loc 1 484 0
 1052 0384 7B6E     		ldr	r3, [r7, #100]
 1053 0386 0233     		add	r3, r3, #2
 1054 0388 7B66     		str	r3, [r7, #100]
 485:../Sources/printf.c ****                 }
 486:../Sources/printf.c ****                 goto cont_xd;
 1055              		.loc 1 486 0
 1056 038a 6BE0     		b	.L98
 1057              	.L63:
 487:../Sources/printf.c **** 
 488:../Sources/printf.c ****             case 'o':
 489:../Sources/printf.c ****                 uval = (unsigned int)va_arg(ap, unsigned int);
 1058              		.loc 1 489 0
 1059 038c 7B68     		ldr	r3, [r7, #4]
 1060 038e 1A1D     		add	r2, r3, #4
 1061 0390 7A60     		str	r2, [r7, #4]
 1062 0392 1B68     		ldr	r3, [r3]
 1063 0394 3B61     		str	r3, [r7, #16]
 490:../Sources/printf.c ****                 vlen = printk_mknumstr(vstr,&uval,FALSE,8);
 1064              		.loc 1 490 0
 1065 0396 3A1C     		mov	r2, r7
 1066 0398 1C32     		add	r2, r2, #28
 1067 039a 3B1C     		mov	r3, r7
 1068 039c 1033     		add	r3, r3, #16
 1069 039e 101C     		mov	r0, r2
 1070 03a0 191C     		mov	r1, r3
 1071 03a2 0022     		mov	r2, #0
 1072 03a4 0823     		mov	r3, #8
 1073 03a6 FFF7FEFF 		bl	printk_mknumstr
 1074 03aa 031C     		mov	r3, r0
 1075 03ac 7B66     		str	r3, [r7, #100]
 491:../Sources/printf.c ****                 goto cont_u;
 1076              		.loc 1 491 0
 1077 03ae 38E0     		b	.L83
 1078              	.L104:
 1079              		.align	2
 1080              	.L103:
 1081 03b0 00000000 		.word	.L40
 1082 03b4 44000000 		.word	.L67
 1083              	.L59:
 492:../Sources/printf.c ****             case 'b':
 493:../Sources/printf.c ****                 uval = (unsigned int)va_arg(ap, unsigned int);
 1084              		.loc 1 493 0
 1085 03b8 7B68     		ldr	r3, [r7, #4]
 1086 03ba 1A1D     		add	r2, r3, #4
 1087 03bc 7A60     		str	r2, [r7, #4]
 1088 03be 1B68     		ldr	r3, [r3]
 1089 03c0 3B61     		str	r3, [r7, #16]
 494:../Sources/printf.c ****                 vlen = printk_mknumstr(vstr,&uval,FALSE,2);
 1090              		.loc 1 494 0
 1091 03c2 3A1C     		mov	r2, r7
 1092 03c4 1C32     		add	r2, r2, #28
 1093 03c6 3B1C     		mov	r3, r7
 1094 03c8 1033     		add	r3, r3, #16
 1095 03ca 101C     		mov	r0, r2
 1096 03cc 191C     		mov	r1, r3
 1097 03ce 0022     		mov	r2, #0
 1098 03d0 0223     		mov	r3, #2
 1099 03d2 FFF7FEFF 		bl	printk_mknumstr
 1100 03d6 031C     		mov	r3, r0
 1101 03d8 7B66     		str	r3, [r7, #100]
 495:../Sources/printf.c ****                 goto cont_u;
 1102              		.loc 1 495 0
 1103 03da 22E0     		b	.L83
 1104              	.L64:
 496:../Sources/printf.c ****             case 'p':
 497:../Sources/printf.c ****                 uval = (unsigned int)va_arg(ap, void *);
 1105              		.loc 1 497 0
 1106 03dc 7B68     		ldr	r3, [r7, #4]
 1107 03de 1A1D     		add	r2, r3, #4
 1108 03e0 7A60     		str	r2, [r7, #4]
 1109 03e2 1B68     		ldr	r3, [r3]
 1110 03e4 3B61     		str	r3, [r7, #16]
 498:../Sources/printf.c ****                 vlen = printk_mknumstr(vstr,&uval,FALSE,16);
 1111              		.loc 1 498 0
 1112 03e6 3A1C     		mov	r2, r7
 1113 03e8 1C32     		add	r2, r2, #28
 1114 03ea 3B1C     		mov	r3, r7
 1115 03ec 1033     		add	r3, r3, #16
 1116 03ee 101C     		mov	r0, r2
 1117 03f0 191C     		mov	r1, r3
 1118 03f2 0022     		mov	r2, #0
 1119 03f4 1023     		mov	r3, #16
 1120 03f6 FFF7FEFF 		bl	printk_mknumstr
 1121 03fa 031C     		mov	r3, r0
 1122 03fc 7B66     		str	r3, [r7, #100]
 499:../Sources/printf.c ****                 goto cont_u;
 1123              		.loc 1 499 0
 1124 03fe 10E0     		b	.L83
 1125              	.L66:
 500:../Sources/printf.c ****             case 'u':
 501:../Sources/printf.c ****                 uval = (unsigned int)va_arg(ap, unsigned int);
 1126              		.loc 1 501 0
 1127 0400 7B68     		ldr	r3, [r7, #4]
 1128 0402 1A1D     		add	r2, r3, #4
 1129 0404 7A60     		str	r2, [r7, #4]
 1130 0406 1B68     		ldr	r3, [r3]
 1131 0408 3B61     		str	r3, [r7, #16]
 502:../Sources/printf.c ****                 vlen = printk_mknumstr(vstr,&uval,FALSE,10);
 1132              		.loc 1 502 0
 1133 040a 3A1C     		mov	r2, r7
 1134 040c 1C32     		add	r2, r2, #28
 1135 040e 3B1C     		mov	r3, r7
 1136 0410 1033     		add	r3, r3, #16
 1137 0412 101C     		mov	r0, r2
 1138 0414 191C     		mov	r1, r3
 1139 0416 0022     		mov	r2, #0
 1140 0418 0A23     		mov	r3, #10
 1141 041a FFF7FEFF 		bl	printk_mknumstr
 1142 041e 031C     		mov	r3, r0
 1143 0420 7B66     		str	r3, [r7, #100]
 1144              	.L83:
 503:../Sources/printf.c **** 
 504:../Sources/printf.c ****                 cont_u:
 505:../Sources/printf.c ****                     vstrp = &vstr[vlen];
 1145              		.loc 1 505 0
 1146 0422 3A1C     		mov	r2, r7
 1147 0424 1C32     		add	r2, r2, #28
 1148 0426 7B6E     		ldr	r3, [r7, #100]
 1149 0428 D318     		add	r3, r2, r3
 1150 042a BB66     		str	r3, [r7, #104]
 506:../Sources/printf.c **** 
 507:../Sources/printf.c ****                     if (IS_FLAG_ZERO(flags_used))
 1151              		.loc 1 507 0
 1152 042c FA6D     		ldr	r2, [r7, #92]
 1153 042e 0823     		mov	r3, #8
 1154 0430 1340     		and	r3, r2
 1155 0432 09D0     		beq	.L84
 508:../Sources/printf.c ****                     {
 509:../Sources/printf.c ****                         printk_pad_zero (vlen, field_width, &count, info);
 1156              		.loc 1 509 0
 1157 0434 786E     		ldr	r0, [r7, #100]
 1158 0436 B96D     		ldr	r1, [r7, #88]
 1159 0438 3A1C     		mov	r2, r7
 1160 043a 1832     		add	r2, r2, #24
 1161 043c FB68     		ldr	r3, [r7, #12]
 1162 043e FFF7FEFF 		bl	printk_pad_zero
 510:../Sources/printf.c ****                         vlen = field_width;
 1163              		.loc 1 510 0
 1164 0442 BB6D     		ldr	r3, [r7, #88]
 1165 0444 7B66     		str	r3, [r7, #100]
 511:../Sources/printf.c ****                     }
 512:../Sources/printf.c ****                     else
 513:../Sources/printf.c ****                     {
 514:../Sources/printf.c ****                         if (!IS_FLAG_MINUS(flags_used))
 515:../Sources/printf.c ****                         {
 516:../Sources/printf.c ****                             printk_pad_space (vlen, field_width, &count, info);
 517:../Sources/printf.c ****                         }
 518:../Sources/printf.c ****                     }
 519:../Sources/printf.c **** 
 520:../Sources/printf.c ****                 cont_xd:
 521:../Sources/printf.c ****                     while (*vstrp)
 1166              		.loc 1 521 0
 1167 0446 1EE0     		b	.L99
 1168              	.L84:
 514:../Sources/printf.c ****                         if (!IS_FLAG_MINUS(flags_used))
 1169              		.loc 1 514 0
 1170 0448 FA6D     		ldr	r2, [r7, #92]
 1171 044a 0123     		mov	r3, #1
 1172 044c 1340     		and	r3, r2
 1173 044e 1AD1     		bne	.L99
 516:../Sources/printf.c ****                             printk_pad_space (vlen, field_width, &count, info);
 1174              		.loc 1 516 0
 1175 0450 786E     		ldr	r0, [r7, #100]
 1176 0452 B96D     		ldr	r1, [r7, #88]
 1177 0454 3A1C     		mov	r2, r7
 1178 0456 1832     		add	r2, r2, #24
 1179 0458 FB68     		ldr	r3, [r7, #12]
 1180 045a FFF7FEFF 		bl	printk_pad_space
 1181              		.loc 1 521 0
 1182 045e 12E0     		b	.L99
 1183              	.L97:
 441:../Sources/printf.c ****                 goto cont_xd;
 1184              		.loc 1 441 0
 1185 0460 C046     		mov	r8, r8
 1186 0462 00E0     		b	.L77
 1187              	.L98:
 486:../Sources/printf.c ****                 goto cont_xd;
 1188              		.loc 1 486 0
 1189 0464 C046     		mov	r8, r8
 1190              	.L77:
 1191              		.loc 1 521 0
 1192 0466 0EE0     		b	.L99
 1193              	.L86:
 522:../Sources/printf.c ****                         printk_putc(*vstrp--, &count, info);
 1194              		.loc 1 522 0
 1195 0468 BB6E     		ldr	r3, [r7, #104]
 1196 046a 1B78     		ldrb	r3, [r3]
 1197 046c 191C     		mov	r1, r3
 1198 046e BB6E     		ldr	r3, [r7, #104]
 1199 0470 013B     		sub	r3, r3, #1
 1200 0472 BB66     		str	r3, [r7, #104]
 1201 0474 3A1C     		mov	r2, r7
 1202 0476 1832     		add	r2, r2, #24
 1203 0478 FB68     		ldr	r3, [r7, #12]
 1204 047a 081C     		mov	r0, r1
 1205 047c 111C     		mov	r1, r2
 1206 047e 1A1C     		mov	r2, r3
 1207 0480 FFF7FEFF 		bl	printk_putc
 1208 0484 00E0     		b	.L85
 1209              	.L99:
 521:../Sources/printf.c ****                     while (*vstrp)
 1210              		.loc 1 521 0
 1211 0486 C046     		mov	r8, r8
 1212              	.L85:
 521:../Sources/printf.c ****                     while (*vstrp)
 1213              		.loc 1 521 0 is_stmt 0
 1214 0488 BB6E     		ldr	r3, [r7, #104]
 1215 048a 1B78     		ldrb	r3, [r3]
 1216 048c 002B     		cmp	r3, #0
 1217 048e EBD1     		bne	.L86
 523:../Sources/printf.c **** 
 524:../Sources/printf.c ****                     if (IS_FLAG_MINUS(flags_used))
 1218              		.loc 1 524 0 is_stmt 1
 1219 0490 FA6D     		ldr	r2, [r7, #92]
 1220 0492 0123     		mov	r3, #1
 1221 0494 1340     		and	r3, r2
 1222 0496 64D0     		beq	.L100
 525:../Sources/printf.c ****                     {
 526:../Sources/printf.c ****                         printk_pad_space (vlen, field_width, &count, info);
 1223              		.loc 1 526 0
 1224 0498 786E     		ldr	r0, [r7, #100]
 1225 049a B96D     		ldr	r1, [r7, #88]
 1226 049c 3A1C     		mov	r2, r7
 1227 049e 1832     		add	r2, r2, #24
 1228 04a0 FB68     		ldr	r3, [r7, #12]
 1229 04a2 FFF7FEFF 		bl	printk_pad_space
 527:../Sources/printf.c ****                     }
 528:../Sources/printf.c ****                 break;
 1230              		.loc 1 528 0
 1231 04a6 5CE0     		b	.L100
 1232              	.L60:
 529:../Sources/printf.c **** 
 530:../Sources/printf.c ****             case 'c':
 531:../Sources/printf.c ****                 cval = (char)va_arg(ap, unsigned int);
 1233              		.loc 1 531 0
 1234 04a8 7B68     		ldr	r3, [r7, #4]
 1235 04aa 1A1D     		add	r2, r3, #4
 1236 04ac 7A60     		str	r2, [r7, #4]
 1237 04ae 1B68     		ldr	r3, [r3]
 1238 04b0 DBB2     		uxtb	r3, r3
 1239 04b2 7B64     		str	r3, [r7, #68]
 532:../Sources/printf.c ****                 printk_putc(cval,&count, info);
 1240              		.loc 1 532 0
 1241 04b4 796C     		ldr	r1, [r7, #68]
 1242 04b6 3A1C     		mov	r2, r7
 1243 04b8 1832     		add	r2, r2, #24
 1244 04ba FB68     		ldr	r3, [r7, #12]
 1245 04bc 081C     		mov	r0, r1
 1246 04be 111C     		mov	r1, r2
 1247 04c0 1A1C     		mov	r2, r3
 1248 04c2 FFF7FEFF 		bl	printk_putc
 533:../Sources/printf.c ****                 break;
 1249              		.loc 1 533 0
 1250 04c6 4FE0     		b	.L32
 1251              	.L65:
 534:../Sources/printf.c ****             case 's':
 535:../Sources/printf.c ****                 sval = (char *)va_arg(ap, char *);
 1252              		.loc 1 535 0
 1253 04c8 7B68     		ldr	r3, [r7, #4]
 1254 04ca 1A1D     		add	r2, r3, #4
 1255 04cc 7A60     		str	r2, [r7, #4]
 1256 04ce 1B68     		ldr	r3, [r3]
 1257 04d0 FB64     		str	r3, [r7, #76]
 536:../Sources/printf.c ****                 if (sval)
 1258              		.loc 1 536 0
 1259 04d2 FB6C     		ldr	r3, [r7, #76]
 1260 04d4 002B     		cmp	r3, #0
 1261 04d6 46D0     		beq	.L101
 1262              	.LBB2:
 537:../Sources/printf.c ****                 {
 538:../Sources/printf.c ****                     vlen = strlen(sval);
 1263              		.loc 1 538 0
 1264 04d8 FB6C     		ldr	r3, [r7, #76]
 1265 04da 181C     		mov	r0, r3
 1266 04dc FFF7FEFF 		bl	strlen
 1267 04e0 031C     		mov	r3, r0
 1268 04e2 7B66     		str	r3, [r7, #100]
 539:../Sources/printf.c ****                     if (!IS_FLAG_MINUS(flags_used))
 1269              		.loc 1 539 0
 1270 04e4 FA6D     		ldr	r2, [r7, #92]
 1271 04e6 0123     		mov	r3, #1
 1272 04e8 1340     		and	r3, r2
 1273 04ea 16D1     		bne	.L102
 540:../Sources/printf.c ****                     {
 541:../Sources/printf.c ****                         printk_pad_space (vlen, field_width, &count, info);
 1274              		.loc 1 541 0
 1275 04ec 786E     		ldr	r0, [r7, #100]
 1276 04ee B96D     		ldr	r1, [r7, #88]
 1277 04f0 3A1C     		mov	r2, r7
 1278 04f2 1832     		add	r2, r2, #24
 1279 04f4 FB68     		ldr	r3, [r7, #12]
 1280 04f6 FFF7FEFF 		bl	printk_pad_space
 542:../Sources/printf.c ****                     }
 543:../Sources/printf.c ****                     while (*sval)
 1281              		.loc 1 543 0
 1282 04fa 0EE0     		b	.L102
 1283              	.L91:
 544:../Sources/printf.c ****                         printk_putc(*sval++,&count, info);
 1284              		.loc 1 544 0
 1285 04fc FB6C     		ldr	r3, [r7, #76]
 1286 04fe 1B78     		ldrb	r3, [r3]
 1287 0500 191C     		mov	r1, r3
 1288 0502 FB6C     		ldr	r3, [r7, #76]
 1289 0504 0133     		add	r3, r3, #1
 1290 0506 FB64     		str	r3, [r7, #76]
 1291 0508 3A1C     		mov	r2, r7
 1292 050a 1832     		add	r2, r2, #24
 1293 050c FB68     		ldr	r3, [r7, #12]
 1294 050e 081C     		mov	r0, r1
 1295 0510 111C     		mov	r1, r2
 1296 0512 1A1C     		mov	r2, r3
 1297 0514 FFF7FEFF 		bl	printk_putc
 1298 0518 00E0     		b	.L90
 1299              	.L102:
 543:../Sources/printf.c ****                     while (*sval)
 1300              		.loc 1 543 0
 1301 051a C046     		mov	r8, r8
 1302              	.L90:
 543:../Sources/printf.c ****                     while (*sval)
 1303              		.loc 1 543 0 is_stmt 0
 1304 051c FB6C     		ldr	r3, [r7, #76]
 1305 051e 1B78     		ldrb	r3, [r3]
 1306 0520 002B     		cmp	r3, #0
 1307 0522 EBD1     		bne	.L91
 545:../Sources/printf.c ****                     if (IS_FLAG_MINUS(flags_used))
 1308              		.loc 1 545 0 is_stmt 1
 1309 0524 FA6D     		ldr	r2, [r7, #92]
 1310 0526 0123     		mov	r3, #1
 1311 0528 1340     		and	r3, r2
 1312 052a 1CD0     		beq	.L101
 546:../Sources/printf.c ****                     {
 547:../Sources/printf.c ****                         printk_pad_space (vlen, field_width, &count, info);
 1313              		.loc 1 547 0
 1314 052c 786E     		ldr	r0, [r7, #100]
 1315 052e B96D     		ldr	r1, [r7, #88]
 1316 0530 3A1C     		mov	r2, r7
 1317 0532 1832     		add	r2, r2, #24
 1318 0534 FB68     		ldr	r3, [r7, #12]
 1319 0536 FFF7FEFF 		bl	printk_pad_space
 1320              	.LBE2:
 548:../Sources/printf.c ****                     }
 549:../Sources/printf.c ****                 }
 550:../Sources/printf.c ****                 break;
 1321              		.loc 1 550 0
 1322 053a 14E0     		b	.L101
 1323              	.L62:
 551:../Sources/printf.c ****             case 'n':
 552:../Sources/printf.c ****                 ivalp = (int *)va_arg(ap, int *);
 1324              		.loc 1 552 0
 1325 053c 7B68     		ldr	r3, [r7, #4]
 1326 053e 1A1D     		add	r2, r3, #4
 1327 0540 7A60     		str	r2, [r7, #4]
 1328 0542 1B68     		ldr	r3, [r3]
 1329 0544 3B64     		str	r3, [r7, #64]
 553:../Sources/printf.c ****                 *ivalp = count;
 1330              		.loc 1 553 0
 1331 0546 BA69     		ldr	r2, [r7, #24]
 1332 0548 3B6C     		ldr	r3, [r7, #64]
 1333 054a 1A60     		str	r2, [r3]
 554:../Sources/printf.c ****                 break;
 1334              		.loc 1 554 0
 1335 054c 0CE0     		b	.L32
 1336              	.L57:
 555:../Sources/printf.c ****             default:
 556:../Sources/printf.c ****                 printk_putc(c,&count, info);
 1337              		.loc 1 556 0
 1338 054e B96C     		ldr	r1, [r7, #72]
 1339 0550 3A1C     		mov	r2, r7
 1340 0552 1832     		add	r2, r2, #24
 1341 0554 FB68     		ldr	r3, [r7, #12]
 1342 0556 081C     		mov	r0, r1
 1343 0558 111C     		mov	r1, r2
 1344 055a 1A1C     		mov	r2, r3
 1345 055c FFF7FEFF 		bl	printk_putc
 557:../Sources/printf.c ****                 break;
 1346              		.loc 1 557 0
 1347 0560 02E0     		b	.L32
 1348              	.L100:
 528:../Sources/printf.c ****                 break;
 1349              		.loc 1 528 0
 1350 0562 C046     		mov	r8, r8
 1351 0564 00E0     		b	.L32
 1352              	.L101:
 550:../Sources/printf.c ****                 break;
 1353              		.loc 1 550 0
 1354 0566 C046     		mov	r8, r8
 1355              	.L32:
 207:../Sources/printf.c ****     for (p = (char *)fmt; (c = *p) != 0; p++)
 1356              		.loc 1 207 0
 1357 0568 FB6E     		ldr	r3, [r7, #108]
 1358 056a 0133     		add	r3, r3, #1
 1359 056c FB66     		str	r3, [r7, #108]
 1360              	.L28:
 207:../Sources/printf.c ****     for (p = (char *)fmt; (c = *p) != 0; p++)
 1361              		.loc 1 207 0 is_stmt 0
 1362 056e FB6E     		ldr	r3, [r7, #108]
 1363 0570 1B78     		ldrb	r3, [r3]
 1364 0572 BB64     		str	r3, [r7, #72]
 1365 0574 BB6C     		ldr	r3, [r7, #72]
 1366 0576 002B     		cmp	r3, #0
 1367 0578 00D0     		beq	.LCB1203
 1368 057a 4CE5     		b	.L92	@long jump
 1369              	.LCB1203:
 558:../Sources/printf.c ****         }
 559:../Sources/printf.c ****     }
 560:../Sources/printf.c ****     return count;
 1370              		.loc 1 560 0 is_stmt 1
 1371 057c BB69     		ldr	r3, [r7, #24]
 561:../Sources/printf.c **** }
 1372              		.loc 1 561 0
 1373 057e 181C     		mov	r0, r3
 1374 0580 BD46     		mov	sp, r7
 1375 0582 1CB0     		add	sp, sp, #112
 1376              		@ sp needed for prologue
 1377 0584 80BD     		pop	{r7, pc}
 1378              		.cfi_endproc
 1379              	.LFE4:
 1381 0586 C046     		.section	.text.io_printf,"ax",%progbits
 1382              		.align	2
 1383              		.global	io_printf
 1384              		.code	16
 1385              		.thumb_func
 1387              	io_printf:
 1388              	.LFB5:
 562:../Sources/printf.c **** 
 563:../Sources/printf.c **** /********************************************************************/
 564:../Sources/printf.c **** int
 565:../Sources/printf.c **** io_printf (const char *fmt, ...)
 566:../Sources/printf.c **** {
 1389              		.loc 1 566 0
 1390              		.cfi_startproc
 1391 0000 0FB4     		push	{r0, r1, r2, r3}
 1392              	.LCFI15:
 1393              		.cfi_def_cfa_offset 16
 1394 0002 80B5     		push	{r7, lr}
 1395              	.LCFI16:
 1396              		.cfi_def_cfa_offset 24
 1397              		.cfi_offset 7, -24
 1398              		.cfi_offset 14, -20
 1399 0004 86B0     		sub	sp, sp, #24
 1400              	.LCFI17:
 1401              		.cfi_def_cfa_offset 48
 1402 0006 00AF     		add	r7, sp, #0
 1403              	.LCFI18:
 1404              		.cfi_def_cfa_register 7
 567:../Sources/printf.c ****     va_list ap;
 568:../Sources/printf.c ****     int rvalue;
 569:../Sources/printf.c ****     PRINTK_INFO info;
 570:../Sources/printf.c **** 
 571:../Sources/printf.c **** 
 572:../Sources/printf.c ****     info.dest = DEST_CONSOLE;
 1405              		.loc 1 572 0
 1406 0008 3B1D     		add	r3, r7, #4
 1407 000a 0122     		mov	r2, #1
 1408 000c 1A60     		str	r2, [r3]
 573:../Sources/printf.c ****     info.func = &uart_putchar;
 1409              		.loc 1 573 0
 1410 000e 3B1D     		add	r3, r7, #4
 1411 0010 0B4A     		ldr	r2, .L107
 1412 0012 5A60     		str	r2, [r3, #4]
 574:../Sources/printf.c ****     /*
 575:../Sources/printf.c ****      * Initialize the pointer to the variable length argument list.
 576:../Sources/printf.c ****      */
 577:../Sources/printf.c ****     va_start(ap, fmt);
 1413              		.loc 1 577 0
 1414 0014 3B1C     		mov	r3, r7
 1415 0016 2433     		add	r3, r3, #36
 1416 0018 3B61     		str	r3, [r7, #16]
 578:../Sources/printf.c ****     rvalue = printk(&info, fmt, ap);
 1417              		.loc 1 578 0
 1418 001a 391D     		add	r1, r7, #4
 1419 001c 3A6A     		ldr	r2, [r7, #32]
 1420 001e 3B69     		ldr	r3, [r7, #16]
 1421 0020 081C     		mov	r0, r1
 1422 0022 111C     		mov	r1, r2
 1423 0024 1A1C     		mov	r2, r3
 1424 0026 FFF7FEFF 		bl	printk
 1425 002a 031C     		mov	r3, r0
 1426 002c 7B61     		str	r3, [r7, #20]
 579:../Sources/printf.c ****     /*
 580:../Sources/printf.c ****      * Cleanup the variable length argument list.
 581:../Sources/printf.c ****      */
 582:../Sources/printf.c ****     va_end(ap);
 583:../Sources/printf.c ****     return rvalue;
 1427              		.loc 1 583 0
 1428 002e 7B69     		ldr	r3, [r7, #20]
 584:../Sources/printf.c **** }
 1429              		.loc 1 584 0
 1430 0030 181C     		mov	r0, r3
 1431 0032 BD46     		mov	sp, r7
 1432 0034 06B0     		add	sp, sp, #24
 1433              		@ sp needed for prologue
 1434 0036 80BC     		pop	{r7}
 1435 0038 08BC     		pop	{r3}
 1436 003a 04B0     		add	sp, sp, #16
 1437 003c 1847     		bx	r3
 1438              	.L108:
 1439 003e C046     		.align	2
 1440              	.L107:
 1441 0040 00000000 		.word	uart_putchar
 1442              		.cfi_endproc
 1443              	.LFE5:
 1445              		.section	.text.sprintf,"ax",%progbits
 1446              		.align	2
 1447              		.global	sprintf
 1448              		.code	16
 1449              		.thumb_func
 1451              	sprintf:
 1452              	.LFB6:
 585:../Sources/printf.c **** 
 586:../Sources/printf.c **** /********************************************************************/
 587:../Sources/printf.c **** int
 588:../Sources/printf.c **** sprintf (char *s, const char *fmt, ...)
 589:../Sources/printf.c **** {
 1453              		.loc 1 589 0
 1454              		.cfi_startproc
 1455 0000 0EB4     		push	{r1, r2, r3}
 1456              	.LCFI19:
 1457              		.cfi_def_cfa_offset 12
 1458 0002 80B5     		push	{r7, lr}
 1459              	.LCFI20:
 1460              		.cfi_def_cfa_offset 20
 1461              		.cfi_offset 7, -20
 1462              		.cfi_offset 14, -16
 1463 0004 89B0     		sub	sp, sp, #36
 1464              	.LCFI21:
 1465              		.cfi_def_cfa_offset 56
 1466 0006 00AF     		add	r7, sp, #0
 1467              	.LCFI22:
 1468              		.cfi_def_cfa_register 7
 1469 0008 7860     		str	r0, [r7, #4]
 590:../Sources/printf.c ****     va_list ap;
 591:../Sources/printf.c ****     int rvalue = 0;
 1470              		.loc 1 591 0
 1471 000a 0023     		mov	r3, #0
 1472 000c FB61     		str	r3, [r7, #28]
 592:../Sources/printf.c ****     PRINTK_INFO info;
 593:../Sources/printf.c **** 
 594:../Sources/printf.c ****     /*
 595:../Sources/printf.c ****      * Initialize the pointer to the variable length argument list.
 596:../Sources/printf.c ****      */
 597:../Sources/printf.c ****     if (s != 0)
 1473              		.loc 1 597 0
 1474 000e 7B68     		ldr	r3, [r7, #4]
 1475 0010 002B     		cmp	r3, #0
 1476 0012 1AD0     		beq	.L110
 598:../Sources/printf.c ****     {
 599:../Sources/printf.c ****         info.dest = DEST_STRING;
 1477              		.loc 1 599 0
 1478 0014 3B1C     		mov	r3, r7
 1479 0016 0C33     		add	r3, r3, #12
 1480 0018 0222     		mov	r2, #2
 1481 001a 1A60     		str	r2, [r3]
 600:../Sources/printf.c ****         info.loc = s;
 1482              		.loc 1 600 0
 1483 001c 3B1C     		mov	r3, r7
 1484 001e 0C33     		add	r3, r3, #12
 1485 0020 7A68     		ldr	r2, [r7, #4]
 1486 0022 9A60     		str	r2, [r3, #8]
 601:../Sources/printf.c ****         va_start(ap, fmt);
 1487              		.loc 1 601 0
 1488 0024 3B1C     		mov	r3, r7
 1489 0026 3033     		add	r3, r3, #48
 1490 0028 BB61     		str	r3, [r7, #24]
 602:../Sources/printf.c ****         rvalue = printk(&info, fmt, ap);
 1491              		.loc 1 602 0
 1492 002a 391C     		mov	r1, r7
 1493 002c 0C31     		add	r1, r1, #12
 1494 002e FA6A     		ldr	r2, [r7, #44]
 1495 0030 BB69     		ldr	r3, [r7, #24]
 1496 0032 081C     		mov	r0, r1
 1497 0034 111C     		mov	r1, r2
 1498 0036 1A1C     		mov	r2, r3
 1499 0038 FFF7FEFF 		bl	printk
 1500 003c 031C     		mov	r3, r0
 1501 003e FB61     		str	r3, [r7, #28]
 603:../Sources/printf.c ****         *info.loc = '\0';
 1502              		.loc 1 603 0
 1503 0040 3B1C     		mov	r3, r7
 1504 0042 0C33     		add	r3, r3, #12
 1505 0044 9B68     		ldr	r3, [r3, #8]
 1506 0046 0022     		mov	r2, #0
 1507 0048 1A70     		strb	r2, [r3]
 1508              	.L110:
 604:../Sources/printf.c ****         va_end(ap);
 605:../Sources/printf.c ****     }
 606:../Sources/printf.c ****     return rvalue;
 1509              		.loc 1 606 0
 1510 004a FB69     		ldr	r3, [r7, #28]
 607:../Sources/printf.c **** }
 1511              		.loc 1 607 0
 1512 004c 181C     		mov	r0, r3
 1513 004e BD46     		mov	sp, r7
 1514 0050 09B0     		add	sp, sp, #36
 1515              		@ sp needed for prologue
 1516 0052 80BC     		pop	{r7}
 1517 0054 08BC     		pop	{r3}
 1518 0056 03B0     		add	sp, sp, #12
 1519 0058 1847     		bx	r3
 1520              		.cfi_endproc
 1521              	.LFE6:
 1523 005a C046     		.text
 1524              	.Letext0:
 1525              		.file 2 "C:/Freescale/CW MCU v10.5/MCU/ARM_GCC_Support/ewl/EWL_C/include/va_list.h"
 1526              		.file 3 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 printf.c
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:18     .text.printk_putc:00000000 $t
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:22     .text.printk_putc:00000000 printk_putc
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:95     .text.printk_mknumstr:00000000 $t
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:99     .text.printk_mknumstr:00000000 printk_mknumstr
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:287    .text.printk_pad_zero:00000000 $t
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:291    .text.printk_pad_zero:00000000 printk_pad_zero
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:341    .text.printk_pad_space:00000000 $t
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:345    .text.printk_pad_space:00000000 printk_pad_space
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:395    .text.printk:00000000 $t
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:400    .text.printk:00000000 printk
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:489    .rodata.printk:00000000 $d
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:1081   .text.printk:000003b0 $d
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:1085   .text.printk:000003b8 $t
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:1382   .text.io_printf:00000000 $t
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:1387   .text.io_printf:00000000 io_printf
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:1441   .text.io_printf:00000040 $d
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:1446   .text.sprintf:00000000 $t
C:\Users\BRENTD~1\AppData\Local\Temp\ccv7Tn8v.s:1451   .text.sprintf:00000000 sprintf
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_idiv
__aeabi_uidiv
strlen
uart_putchar
